"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5142],{5680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>u});var r=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=d(a),m=n,u=g["".concat(s,".").concat(m)]||g[m]||c[m]||i;return a?r.createElement(u,o(o({ref:t},p),{},{components:a})):r.createElement(u,o({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:n,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4628:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>g});var r=a(8168),n=a(8587),i=(a(6540),a(5680)),o=["components"],l={id:"studio-binding",title:"Binding",sidebar_label:"Binding"},s=void 0,d={unversionedId:"tutorials/studio-binding",id:"tutorials/studio-binding",title:"Binding",description:"Connect your model to semi-structured files",source:"@site/../docs/tutorials/studio-binding.md",sourceDirName:"tutorials",slug:"/tutorials/studio-binding",permalink:"/docs/tutorials/studio-binding",draft:!1,tags:[],version:"current",frontMatter:{id:"studio-binding",title:"Binding",sidebar_label:"Binding"},sidebar:"docs",previous:{title:"Schemaset",permalink:"/docs/tutorials/studio-schemaset"},next:{title:"Persistence",permalink:"/docs/tutorials/studio-persistence"}},p={},g=[{value:"Connect your model to semi-structured files",id:"connect-your-model-to-semi-structured-files",level:2},{value:"External Format",id:"external-format",level:3},{value:"A) Starting with a data schema",id:"a-starting-with-a-data-schema",level:4},{value:"B) Starting from a model definition",id:"b-starting-from-a-model-definition",level:4},{value:"More",id:"more",level:2}],c={toc:g},m="wrapper";function u(e){var t=e.components,l=(0,n.A)(e,o);return(0,i.yg)(m,(0,r.A)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"connect-your-model-to-semi-structured-files"},"Connect your model to semi-structured files"),(0,i.yg)("h3",{id:"external-format"},"External Format"),(0,i.yg)("p",null,"External Format allows you to define a formal schema (eg : XSD, Json Schema) of your data using and bind this formal schema to your Studio model. External Format should be used for anything related to a format."),(0,i.yg)("h4",{id:"a-starting-with-a-data-schema"},"A) Starting with a data schema"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Step 1:")," Create Schemaset"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Create a ",(0,i.yg)("kbd",null,"New SchemaSet"),(0,i.yg)("img",{alt:"ExtFormat1",src:a(5793).A,width:"2540",height:"1530"})),(0,i.yg)("li",{parentName:"ol"},"Provide a name for the SchemaSet and select Flatdata as the type from the drop-down list\n",(0,i.yg)("img",{alt:"ExtFormat2",src:a(2534).A,width:"2544",height:"516"})),(0,i.yg)("li",{parentName:"ol"},"Add the schema definition with the ",(0,i.yg)("kbd",null,"+")," icon and add add your schema definition in the box\n",(0,i.yg)("img",{alt:"ExtFormat3",src:a(7795).A,width:"2536",height:"1028"})," "),(0,i.yg)("li",{parentName:"ol"},"(Optional for flatdata) Provide id and location for your schema")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Step 2:")," Generate corresponding models and binding"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Navigate to the ",(0,i.yg)("kbd",null,"Model Generation")," tab\n",(0,i.yg)("img",{alt:"ExtFormat4",src:a(7488).A,width:"2524",height:"1470"}))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Provide ",(0,i.yg)("strong",{parentName:"p"},"targetPackage")," (the package under which the classes would be generated) and ",(0,i.yg)("strong",{parentName:"p"},"binding path")," (path for the generated binding)\n",(0,i.yg)("img",{alt:"ExtFormat5",src:a(3053).A,width:"1826",height:"1482"}))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Click the ",(0,i.yg)("kbd",null,"Generate")," button. You should be able to preview the classes that will be generated.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"If the preview looks good, click ",(0,i.yg)("kbd",null,"Import")," and the classes will be added to your project")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"If your flatdata schema has multiple sections and you want to generate a wrapper class linking all record classes, you can do so by providing a 'schemaClassName'"))),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Step 3:")," Create a new service"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"When working with external formats you need to use ",(0,i.yg)("a",{parentName:"p",href:"/docs/overview/legend-glossary/#internalize"},"internalize")," instead of all queries. Internalize can be chained with ",(0,i.yg)("strong",{parentName:"p"},"checked()"),", ",(0,i.yg)("strong",{parentName:"p"},"graphFetch()"),", ",(0,i.yg)("strong",{parentName:"p"},"graphFetchChecked()")," depending on the requirements. See ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/finos/legend-engine/blob/master/docs/queries/queries.md#checked-graphfetch-graphfetchchecked-graphfetchunexpanded-graphfetchcheckedunexpanded"},"reference documentation")," for details.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"When defining a service with ",(0,i.yg)("a",{parentName:"p",href:"/docs/overview/legend-glossary/#internalize"},"internalize"),", you don't need a mapping or runtime. You will only need to define a query (currently supported via ",(0,i.yg)("a",{parentName:"p",href:"/docs/overview/legend-features/#text-mode"},"Text Mode")," only).")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Define your service with query using ",(0,i.yg)("a",{parentName:"p",href:"/docs/overview/legend-glossary/#internalize"},"internalize"),". You can find examples in the ",(0,i.yg)("a",{parentName:"p",href:"/docs/showcases/showcase-projects/#user-journey-5-connect-to-data-source"},"External Format showcase project"),", under the 'flatdata' package. "),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Example data: ",(0,i.yg)("inlineCode",{parentName:"li"},"String[1]| Person ->internalize(PersonBinding, $data)->serialize(#Person{firstName,lastName}}#);"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"This query accepts input as a parameter named data. Query uses internalize function to deserialize this data into Person instances which are then serialized using the serialize function. "))))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Define tests for your service. You do not need to provide a connection test data as there are no connections. Your test data goes as a parameter in the test setup tab, because your query accepts data as a parameter. ")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Run your test and validate the output.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Save your test"))),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Step 4:")," (Optional) Add M2M transform."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Create your target model")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Create an ",(0,i.yg)("a",{parentName:"p",href:"../overview/legend-features#model-to-model-mapping"},"M2M mapping")," between your target model and source model (auto-generated model from schema)")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Create a service chaining deserialization and M2M transform:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Query data: ",(0,i.yg)("inlineCode",{parentName:"li"},"String[1]|TargetPerson.all()->graphFetch(#{TargetPerson{fullName}}#)->from(M2MMapping, Person->getRuntimeWithModelQueryConnection(PersonBinding, $data))->serialize(#{TargetPerson{fullName}}#);"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"This query accepts input as parameter named data. This input is deserialized into Person instances and wrapped into a runtime by this part of the query ",(0,i.yg)("inlineCode",{parentName:"li"},"Person->getRuntimeWithModelQueryConnection(PersonBinding, $data)"),". Once deserialization is achieved and generated instances are wrapped into runtime, the query executes ",(0,i.yg)("strong",{parentName:"li"},"from")," expression to perform a M2M transform."))))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Define tests for your service. You do not need to provide connection test data because connection is generated implicitly using input. Your test data goes as a parameter in the test setup tab, because your query accepts data as a parameter.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Run your test and validate the output.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Save your test "))),(0,i.yg)("h4",{id:"b-starting-from-a-model-definition"},"B) Starting from a model definition"),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"Tutorial coming soon.")),(0,i.yg)("h2",{id:"more"},"More"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/showcases/showcase-projects"},"Showcase projects")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/overview/legend-features"},"Legend Features")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/overview/legend-glossary"},"Legend Glossary")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/reference/legend-language"},"Reference documentation")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/tutorials/studio-workspace"},"Studio tutorials")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/tutorials/query-builder"},"Query tutorials"))))}u.isMDXComponent=!0},5793:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ExtFormat1-14778f94ad2f5169b548d00b9e8c5058.jpg"},2534:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ExtFormat2-2f7bce446248295b726ed375e00248a0.jpg"},7795:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ExtFormat3-cc5c5cd4b05ad180e940785c18f177fc.jpg"},7488:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ExtFormat4-7dd3c4b44067514805c93dd5679a3e40.jpg"},3053:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ExtFormat5-53378560eeaea7331259d862cdd274ec.jpg"}}]);