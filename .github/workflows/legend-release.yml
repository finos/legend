name: Trigger Legend Stack Release

on:
  workflow_dispatch:
    inputs:
      legend-shared-release:
        type: choice
        description: "New release version for legend shared"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']
      legend-pure-release:
        type: choice
        description: "New release version for legend pure"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']
      legend-engine-release:
        type: choice
        description: "New release version for legend engine"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']
      legend-sdlc-release:
        type: choice
        description: "New release version for legend sdlc"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']
      legend-depot-release:
        type: choice
        description: "New release version for legend depot"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']

env:
  OWNER: finos
  RELEASE_TOKEN: ${{ secrets.FINOS_GITHUB_TOKEN }}
  EVENT_TYPE: legend-stack-release
  WORKFLOW_ID: legend-stack-release.yml

jobs:
  compute-versions:
    runs-on: ubuntu-latest
    outputs:
      legend_shared_release_version: ${{ steps.set_legend_shared_release_version.outputs.legend_shared_release_version }}
      legend_pure_release_version: ${{ steps.set_legend_pure_release_version.outputs.legend_pure_release_version }}
      legend_engine_release_version: ${{ steps.set_legend_engine_release_version.outputs.legend_engine_release_version }}
      legend_sdlc_release_version: ${{ steps.set_legend_sdlc_release_version.outputs.legend_sdlc_release_version }}
      legend_depot_release_version: ${{ steps.set_legend_depot_release_version.outputs.legend_depot_release_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2
      - name: Compute legend-shared-release-version
        id: set_legend_shared_release_version
        if: github.event.inputs.legend-shared-release != 'n/a'
        run: |
          legend_shared_release_version=$(bash ./scripts/compute-version.sh "legend-shared" "${{ github.event.inputs.legend-shared-release }}")
          echo "legend_shared_release_version=${legend_shared_release_version}" >> "$GITHUB_OUTPUT"

      - name: Compute legend-pure-release-version
        id: set_legend_pure_release_version
        if: github.event.inputs.legend-pure-release != 'n/a'
        run: |
          legend_pure_release_version=$(bash ./scripts/compute-version.sh "legend-pure" "${{ github.event.inputs.legend-pure-release }}")
          echo "legend_pure_release_version=${legend_pure_release_version}" >> "$GITHUB_OUTPUT"

      - name: Compute legend-engine-release-version
        id: set_legend_engine_release_version
        if: github.event.inputs.legend-engine-release != 'n/a'
        run: |
          legend_engine_release_version=$(bash ./scripts/compute-version.sh "legend-engine" "${{ github.event.inputs.legend-engine-release }}")
          echo "legend_engine_release_version=${legend_engine_release_version}" >> "$GITHUB_OUTPUT"

      - name: Compute legend-sdlc-release-version
        id: set_legend_sdlc_release_version
        if: github.event.inputs.legend-sdlc-release != 'n/a'
        run: |
          legend_sdlc_release_version=$(bash ./scripts/compute-version.sh "legend-sdlc" "${{ github.event.inputs.legend-sdlc-release }}")
          echo "legend_sdlc_release_version=${legend_sdlc_release_version}" >> "$GITHUB_OUTPUT"

      - name: Compute legend-depot-release-version
        id: set_legend_depot_release_version
        if: github.event.inputs.legend-depot-release != 'n/a'
        run: |
          legend_depot_release_version=$(bash ./scripts/compute-version.sh "legend-depot" "${{ github.event.inputs.legend-depot-release }}")
          echo "legend_depot_release_version=${legend_depot_release_version}" >> "$GITHUB_OUTPUT"
  release-legend-shared:
    runs-on: ubuntu-latest
    needs: [compute-versions]
    if: github.event.inputs.legend-shared-release != 'n/a'
    steps:
      - name: Set Required RunNumber of Legend Shared Release
        run: |
          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-shared"
          workflow_id="${{ env.WORKFLOW_ID }}"
          
          # Get the last run number
          lastRunNumber=$(curl -s -H "Authorization: token $auth_token" "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" | jq -r '.workflow_runs[0].run_number')
          
          # Calculate the required run number
          requiredRunNumber=$((lastRunNumber + 1))
          
          # Set the environment variable
          echo "Setting LEGEND_SHARED_RUN_NUMBER to $requiredRunNumber"
          echo "LEGEND_SHARED_RUN_NUMBER=${requiredRunNumber}" >> $GITHUB_ENV
          
          # Echo release version
          echo "legend_shared_release_version:${{ needs.compute-versions.outputs.legend_shared_release_version }}"
      - name: Trigger Legend Shared Release
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ env.RELEASE_TOKEN }}
          repository: ${{ env.OWNER }}/legend-shared
          event-type: ${{ env.EVENT_TYPE }}
          client-payload: '{"releaseVersion": "${{ needs.compute-versions.outputs.legend_shared_release_version }}"}'
      - name: Check Status Of Legend Shared Release
        run: |
          sleep 1m                                # Wait for 1 minute before polling the API again
          
          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-shared"
          workflow_id="${{ env.WORKFLOW_ID }}"
          required_run_number="${{ env.LEGEND_SHARED_RUN_NUMBER }}"
          
          # Find the ID of the required workflow run
          run_id=$(curl -s -H "Authorization: token $auth_token" \
            "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" \
            | jq -r ".workflow_runs[] | select(.run_number==$required_run_number) | .id")
          
          # Poll the API until the conclusion field is not null
          result="null"
          while [ "$result" == "null" ]
          do
            sleep 5m                           # Wait for 5 minute before polling the API again
            result=$(curl -s -H "Authorization: token $auth_token" \
              "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id" \
              | jq -r '.conclusion')
            echo "Waiting for workflow $run_id to complete..."
          done
          
          # Log the result
          echo "Triggered workflow $run_id completed with result $result."
          
          # Fail if the result is not success
          if [ "$result" != "success" ]
          then
            exit 1
          fi
      - name: Check Legend Shared Artifact Availability
        run: |
          artifact_group='org.finos.legend.shared'
          artifact_name='legend-shared'
          artifact_version='${{ needs.compute-versions.outputs.legend_shared_release_version }}'
          
          max_retries=120
          retries=0
          
          while true; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://central.sonatype.com/artifact/$artifact_group/$artifact_name/$artifact_version")

            if [ "$response" == "200" ]; then
              echo "Artifact is available in Maven Central."
              break
            else
              retries=$((retries + 1))
          
              if [ "$retries" -gt "$max_retries" ]; then
                echo "Maximum number of retries reached. Artifact is not available in Maven Central."
                exit 1
              fi
          
              echo "Artifact is not available in Maven Central. Retrying in 1 minute..."
              sleep 1m
            fi
          done
          sleep 1m   # Sleep for 1 more minute to be on safer side

  release-legend-pure:
    runs-on: ubuntu-latest
    needs: [compute-versions]
    if: github.event.inputs.legend-pure-release != 'n/a'
    steps:
      - name: Set Required RunNumber of Legend Pure Release
        run: |
          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-pure"
          workflow_id="${{ env.WORKFLOW_ID }}"
          
          # Get the last run number
          lastRunNumber=$(curl -s -H "Authorization: token $auth_token" "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" | jq -r '.workflow_runs[0].run_number')
          
          # Calculate the required run number
          requiredRunNumber=$((lastRunNumber + 1))
          
          # Set the environment variable
          echo "Setting LEGEND_PURE_RUN_NUMBER to $requiredRunNumber"
          echo "LEGEND_PURE_RUN_NUMBER=${requiredRunNumber}" >> $GITHUB_ENV
          
          # Echo release version
          echo "legend_pure_release_version:${{ needs.compute-versions.outputs.legend_pure_release_version }}"
      - name: Trigger Legend Pure Release
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ env.RELEASE_TOKEN }}
          repository: ${{ env.OWNER }}/legend-pure
          event-type: ${{ env.EVENT_TYPE }}
          client-payload: '{"releaseVersion": "${{ needs.compute-versions.outputs.legend_pure_release_version }}"}'
      - name: Check Status Of Legend Pure Release
        run: |
          sleep 1m                                # Wait for 1 minute before polling the API again

          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-pure"
          workflow_id="${{ env.WORKFLOW_ID }}"
          required_run_number="${{ env.LEGEND_PURE_RUN_NUMBER }}"
          
          # Find the ID of the required workflow run
          run_id=$(curl -s -H "Authorization: token $auth_token" \
            "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" \
            | jq -r ".workflow_runs[] | select(.run_number==$required_run_number) | .id")
          
          # Poll the API until the conclusion field is not null
          result="null"
          while [ "$result" == "null" ]
          do
            sleep 5m                             # Wait for 5 minutes before polling the API again
            result=$(curl -s -H "Authorization: token $auth_token" \
              "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id" \
              | jq -r '.conclusion')
            echo "Waiting for workflow $run_id to complete..."
          done
          
          # Log the result
          echo "Triggered workflow $run_id completed with result $result."
          
          # Fail if the result is not success
          if [ "$result" != "success" ]
          then
            exit 1
          fi
      - name: Check Legend Pure Artifact Availability
        run: |
          artifact_group='org.finos.legend.pure'
          artifact_name='legend-pure'
          artifact_version='${{ needs.compute-versions.outputs.legend_pure_release_version }}'
          
          max_retries=120
          retries=0
          
          while true; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://central.sonatype.com/artifact/$artifact_group/$artifact_name/$artifact_version")

            if [ "$response" == "200" ]; then
              echo "Artifact is available in Maven Central."
              break
            else
              retries=$((retries + 1))
          
              if [ "$retries" -gt "$max_retries" ]; then
                echo "Maximum number of retries reached. Artifact is not available in Maven Central."
                exit 1
              fi
          
              echo "Artifact is not available in Maven Central. Retrying in 1 minute..."
              sleep 1m
            fi
          done
          sleep 1m   # Sleep for 1 more minute to be on safer side

  release-legend-engine:
    runs-on: ubuntu-latest
    needs: [compute-versions, release-legend-shared, release-legend-pure]
    if: always() && github.event.inputs.legend-engine-release != 'n/a' && needs.compute-versions.result == 'success' && ( needs.release-legend-shared.result == 'success' || needs.release-legend-shared.result == 'skipped' ) && ( needs.release-legend-pure.result == 'success' || needs.release-legend-pure.result == 'skipped' )
    steps:
      - name: Set Required RunNumber of Legend Engine Release
        run: |
          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-engine"
          workflow_id="${{ env.WORKFLOW_ID }}"
          
          # Get the last run number
          lastRunNumber=$(curl -s -H "Authorization: token $auth_token" "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" | jq -r '.workflow_runs[0].run_number')
          
          # Calculate the required run number
          requiredRunNumber=$((lastRunNumber + 1))
          
          # Set the environment variable
          echo "Setting LEGEND_ENGINE_RUN_NUMBER to $requiredRunNumber"
          echo "LEGEND_ENGINE_RUN_NUMBER=${requiredRunNumber}" >> $GITHUB_ENV
          
          # Echo release version
          echo "legend_engine_release_version:${{ needs.compute-versions.outputs.legend_engine_release_version }}"
      - name: Trigger Legend Engine Release
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ env.RELEASE_TOKEN }}
          repository: ${{ env.OWNER }}/legend-engine
          event-type: ${{ env.EVENT_TYPE }}
          client-payload: '{"releaseVersion": "${{ needs.compute-versions.outputs.legend_engine_release_version }}", "legendPureVersion": "${{ needs.compute-versions.outputs.legend_pure_release_version }}", "legendSharedVersion": "${{ needs.compute-versions.outputs.legend_shared_release_version }}"}'
      - name: Check Status Of Legend Engine Release
        run: |
          sleep 1m                                # Wait for 1 minute before polling the API again

          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-engine"
          workflow_id="${{ env.WORKFLOW_ID }}"
          required_run_number="${{ env.LEGEND_ENGINE_RUN_NUMBER }}"
          
          # Find the ID of the required workflow run
          run_id=$(curl -s -H "Authorization: token $auth_token" \
            "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" \
            | jq -r ".workflow_runs[] | select(.run_number==$required_run_number) | .id")
          
          # Poll the API until the conclusion field is not null
          result="null"
          while [ "$result" == "null" ]
          do
            sleep 5m                           # Wait for 5 minutes before polling the API again
            result=$(curl -s -H "Authorization: token $auth_token" \
              "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id" \
              | jq -r '.conclusion')
            echo "Waiting for workflow $run_id to complete..."
          done
          
          # Log the result
          echo "Triggered workflow $run_id completed with result $result."
          
          # Fail if the result is not success
          if [ "$result" != "success" ]
          then
            exit 1
          fi
      - name: Check Legend Engine Artifact Availability
        run: |
          artifact_group='org.finos.legend.engine'
          artifact_name='legend-engine'
          artifact_version='${{ needs.compute-versions.outputs.legend_engine_release_version }}'
          
          max_retries=120
          retries=0
          
          while true; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://central.sonatype.com/artifact/$artifact_group/$artifact_name/$artifact_version")

            if [ "$response" == "200" ]; then
              echo "Artifact is available in Maven Central."
              break
            else
              retries=$((retries + 1))
          
              if [ "$retries" -gt "$max_retries" ]; then
                echo "Maximum number of retries reached. Artifact is not available in Maven Central."
                exit 1
              fi
          
              echo "Artifact is not available in Maven Central. Retrying in 1 minute..."
              sleep 1m
            fi
          done
          sleep 1m   # Sleep for 1 more minute to be on safer side

  release-legend-sdlc:
    runs-on: ubuntu-latest
    needs: [compute-versions, release-legend-shared, release-legend-pure, release-legend-engine]
    if: always() && github.event.inputs.legend-sdlc-release != 'n/a' && needs.compute-versions.result == 'success' && ( needs.release-legend-shared.result == 'success' || needs.release-legend-shared.result == 'skipped' ) && ( needs.release-legend-pure.result == 'success' || needs.release-legend-pure.result == 'skipped' ) && ( needs.release-legend-engine.result == 'success' || needs.release-legend-engine.result == 'skipped' )
    steps:
      - name: Set Required RunNumber of Legend Sdlc Release
        run: |
          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-sdlc"
          workflow_id="${{ env.WORKFLOW_ID }}"
          
          # Get the last run number
          lastRunNumber=$(curl -s -H "Authorization: token $auth_token" "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" | jq -r '.workflow_runs[0].run_number')
          
          # Calculate the required run number
          requiredRunNumber=$((lastRunNumber + 1))
          
          # Set the environment variable
          echo "Setting LEGEND_SDLC_RUN_NUMBER to $requiredRunNumber"
          echo "LEGEND_SDLC_RUN_NUMBER=${requiredRunNumber}" >> $GITHUB_ENV
          
          # Echo release version
          echo "legend_sdlc_release_version:${{ needs.compute-versions.outputs.legend_sdlc_release_version }}"
      - name: Trigger Legend Sdlc Release
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ env.RELEASE_TOKEN }}
          repository: ${{ env.OWNER }}/legend-sdlc
          event-type: ${{ env.EVENT_TYPE }}
          client-payload: '{"releaseVersion": "${{ needs.compute-versions.outputs.legend_sdlc_release_version }}", "legendPureVersion": "${{ needs.compute-versions.outputs.legend_pure_release_version }}", "legendSharedVersion": "${{ needs.compute-versions.outputs.legend_shared_release_version }}", "legendEngineVersion": "${{ needs.compute-versions.outputs.legend_engine_release_version }}"}'
      - name: Check Status Of Legend Sdlc Release
        run: |
          sleep 1m                                # Wait for 1 minute before polling the API again

          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-sdlc"
          workflow_id="${{ env.WORKFLOW_ID }}"
          required_run_number="${{ env.LEGEND_SDLC_RUN_NUMBER }}"
          
          # Find the ID of the required workflow run
          run_id=$(curl -s -H "Authorization: token $auth_token" \
            "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" \
            | jq -r ".workflow_runs[] | select(.run_number==$required_run_number) | .id")
          
          # Poll the API until the conclusion field is not null
          result="null"
          while [ "$result" == "null" ]
          do
            sleep 5m                             # Wait for 5 minutes before polling the API again
            result=$(curl -s -H "Authorization: token $auth_token" \
              "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id" \
              | jq -r '.conclusion')
            echo "Waiting for workflow $run_id to complete..."
          done
          
          # Log the result
          echo "Triggered workflow $run_id completed with result $result."
          
          # Fail if the result is not success
          if [ "$result" != "success" ]
          then
            exit 1
          fi
      - name: Check Legend Sdlc Artifact Availability
        run: |
          artifact_group='org.finos.legend.sdlc'
          artifact_name='legend-sdlc'
          artifact_version='${{ needs.compute-versions.outputs.legend_sdlc_release_version }}'
          
          max_retries=120
          retries=0
          
          while true; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://central.sonatype.com/artifact/$artifact_group/$artifact_name/$artifact_version")

            if [ "$response" == "200" ]; then
              echo "Artifact is available in Maven Central."
              break
            else
              retries=$((retries + 1))
          
              if [ "$retries" -gt "$max_retries" ]; then
                echo "Maximum number of retries reached. Artifact is not available in Maven Central."
                exit 1
              fi
          
              echo "Artifact is not available in Maven Central. Retrying in 1 minute..."
              sleep 1m
            fi
          done
          sleep 1m   # Sleep for 1 more minute to be on safer side

  release-legend-depot:
    runs-on: ubuntu-latest
    needs: [compute-versions, release-legend-shared, release-legend-pure, release-legend-engine, release-legend-sdlc]
    if: always() && github.event.inputs.legend-depot-release != 'n/a' && needs.compute-versions.result == 'success' && ( needs.release-legend-shared.result == 'success' || needs.release-legend-shared.result == 'skipped' ) && ( needs.release-legend-pure.result == 'success' || needs.release-legend-pure.result == 'skipped' ) && ( needs.release-legend-engine.result == 'success' || needs.release-legend-engine.result == 'skipped' ) && ( needs.release-legend-sdlc.result == 'success' || needs.release-legend-sdlc.result == 'skipped' )
    steps:
      - name: Set Required RunNumber of Legend Depot Release
        run: |
          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-depot"
          workflow_id="${{ env.WORKFLOW_ID }}"

          # Get the last run number
          lastRunNumber=$(curl -s -H "Authorization: token $auth_token" "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" | jq -r '.workflow_runs[0].run_number')

          # Calculate the required run number
          requiredRunNumber=$((lastRunNumber + 1))

          # Set the environment variable
          echo "Setting LEGEND_DEPOT_RUN_NUMBER to $requiredRunNumber"
          echo "LEGEND_DEPOT_RUN_NUMBER=${requiredRunNumber}" >> $GITHUB_ENV
          
          # Echo release version
          echo "legend_depot_release_version:${{ needs.compute-versions.outputs.legend_depot_release_version }}"
      - name: Trigger Legend Depot Release
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ env.RELEASE_TOKEN }}
          repository: ${{ env.OWNER }}/legend-depot
          event-type: ${{ env.EVENT_TYPE }}
          client-payload: '{"releaseVersion": "${{ needs.compute-versions.outputs.legend_depot_release_version }}", "legendSdlcVersion": "${{ needs.compute-versions.outputs.legend_sdlc_release_version }}", "legendSharedVersion": "${{ needs.compute-versions.outputs.legend_shared_release_version }}", "legendEngineVersion": "${{ needs.compute-versions.outputs.legend_engine_release_version }}"}'
      - name: Check Status Of Legend Depot Release
        run: |
          sleep 1m                                # Wait for 1 minute before polling the API again

          auth_token="${{ env.RELEASE_TOKEN }}"
          owner="${{ env.OWNER }}"
          repo="legend-depot"
          workflow_id="${{ env.WORKFLOW_ID }}"
          required_run_number="${{ env.LEGEND_DEPOT_RUN_NUMBER }}"

          # Find the ID of the required workflow run
          run_id=$(curl -s -H "Authorization: token $auth_token" \
            "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs" \
            | jq -r ".workflow_runs[] | select(.run_number==$required_run_number) | .id")

          # Poll the API until the conclusion field is not null
          result="null"
          while [ "$result" == "null" ]
          do
            sleep 5m                             # Wait for 5 minutes before polling the API again
            result=$(curl -s -H "Authorization: token $auth_token" \
              "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id" \
              | jq -r '.conclusion')
            echo "Waiting for workflow $run_id to complete..."
          done

          # Log the result
          echo "Triggered workflow $run_id completed with result $result."

          # Fail if the result is not success
          if [ "$result" != "success" ]
          then
            exit 1
          fi
      - name: Check Legend Depot Artifact Availability
        run: |
          artifact_group='org.finos.legend.depot'
          artifact_name='legend-depot'
          artifact_version='${{ needs.compute-versions.outputs.legend_depot_release_version }}'
          
          max_retries=120
          retries=0
          
          while true; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://central.sonatype.com/artifact/$artifact_group/$artifact_name/$artifact_version")

            if [ "$response" == "200" ]; then
              echo "Artifact is available in Maven Central."
              break
            else
              retries=$((retries + 1))
          
              if [ "$retries" -gt "$max_retries" ]; then
                echo "Maximum number of retries reached. Artifact is not available in Maven Central."
                exit 1
              fi
          
              echo "Artifact is not available in Maven Central. Retrying in 1 minute..."
              sleep 1m
            fi
          done
          sleep 1m   # Sleep for 1 more minute to be on safer side
