[{"title":"Avro Binding Schema ID","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Avro/Binding/Schema ID","code":""},{"title":"Avro Binding Schema Set","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Avro/Binding/Schema Set","code":""},{"title":"Avro Externalize","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Avro/Externalize","code":""},{"title":"Avro Functions","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Avro/Functions","code":""},{"title":"Avro Internalize","documentation":"TODO: Some dummy description","path":"5-connect-data-to-datasources/External Formats/Avro/Internalize","code":""},{"title":"Avro Model Generator","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Avro/Model Generator/Model include/exclude","code":""},{"title":"Daml Binding Schema ID","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Daml/Binding/Schema ID","code":""},{"title":"Daml Binding Schema Set","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Daml/Binding/Schema Set","code":""},{"title":"Daml Externalize","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Daml/Externalize","code":""},{"title":"Daml Functions","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Daml/Functions","code":""},{"title":"Daml Internalize","documentation":"TODO: Some dummy description","path":"5-connect-data-to-datasources/External Formats/Daml/Internalize","code":""},{"title":"Daml Model Generator","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Daml/Model Generator/Model include/exclude","code":""},{"title":"JSON Binding Schema ID","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/JSONSchema/Binding/Schema ID","code":""},{"title":"JSON Binding Schema Set","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/JSONSchema/Binding/Schema Set","code":""},{"title":"JSON Externalize","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/JSONSchema/Externalize","code":""},{"title":"Json Functions","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/JSONSchema/Functions","code":""},{"title":"JSON Internalize","documentation":"TODO: Some dummy description","path":"5-connect-data-to-datasources/External Formats/JSONSchema/Internalize","code":""},{"title":"JSON Model Generator","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/JSONSchema/Model Generator/Model include/exclude","code":""},{"title":"Protobuf Binding Schema ID","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Protobuf/Binding/Schema ID","code":""},{"title":"Protobuf Binding Schema Set","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Protobuf/Binding/Schema Set","code":""},{"title":"Protobuf Externalize","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Protobuf/Externalize","code":""},{"title":"Protobuf Functions","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Protobuf/Functions","code":""},{"title":"Protobuf Internalize","documentation":"TODO: Some dummy description","path":"5-connect-data-to-datasources/External Formats/Protobuf/Internalize","code":""},{"title":"Protobuf Model Generator","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/Protobuf/Model Generator/Model include/exclude","code":""},{"title":"Xml Binding Schema ID","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/XML/Binding/Schema ID","code":""},{"title":"Xml Binding Schema Set","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/XML/Binding/Schema Set","code":""},{"title":"Xml Externalize","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/XML/Externalize","code":""},{"title":"Xml Functions","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/XML/Functions","code":""},{"title":"Xml Internalize","documentation":"TODO: Some dummy description","path":"5-connect-data-to-datasources/External Formats/XML/Internalize","code":""},{"title":"Xml Model Generator","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/External Formats/XML/Model Generator/Model include/exclude","code":""},{"title":"Association - Embedded","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/association/embedded","code":""},{"title":"Association - Inheritance","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/association/inheritance","code":""},{"title":"Association - ClassMappingByClass","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/classMappingByClass","code":""},{"title":"Association - ClassMappingFilterWithInnerJoin","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/classMappingFilterWithInnerJoin","code":""},{"title":"DataType","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/dataType","code":""},{"title":"Dates - datetime","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/dates/datetime","code":""},{"title":"Dates - strictdate","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/dates/strictdate","code":""},{"title":"Distinct","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/distinct","code":""},{"title":"Dynajoin","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/dynajoin","code":""},{"title":"Embedded - Advanced - Inline - Nested","documentation":"TODO: Some dummy description","path":"5-connect-data-to-datasources/Stores/Model Store/embedded/inline/nested","code":""},{"title":"Embedded - Advanced - Inline - targetId","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/embedded/inline/targetId","code":""},{"title":"Enumeration","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/enumeration","code":""},{"title":"Extend - all","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/all","code":""},{"title":"Extend - distinct","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/distinct","code":""},{"title":"Extend - embeddedPropertyMapping","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/embeddedPropertyMapping","code":""},{"title":"Extend - filter","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/filter","code":""},{"title":"Extend - groupBy","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/groupBy","code":""},{"title":"Extent - inlineEmbeddedPropertyMapping","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/inlineEmbeddedPropertyMapping","code":""},{"title":"Extend - mainTable","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/mainTable","code":""},{"title":"Extend - model","documentation":"TODO: Some dummy description","path":"5-connect-data-to-datasources/Stores/Model Store/extend/model","code":""},{"title":"Extend - primaryKey","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/primaryKey","code":""},{"title":"Extend - propertyMapping","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/propertyMapping","code":""},{"title":"Extend - store","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/store","code":""},{"title":"Extend - storeSubstitution","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/storeSubstitution","code":""},{"title":"Extend - Union","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/extend/union","code":""},{"title":"Extend - Filter","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/filter","code":""},{"title":"GroupBy","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/groupBy","code":""},{"title":"In","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/in","code":""},{"title":"Include","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/include","code":""},{"title":"Inheritance - Cross","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/inheritance/cross","code":""},{"title":"Inheritance - Relational - multiJoins","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/inheritance/relational/multiJoins","code":""},{"title":"Inheritance - Relational - selfJoin","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/inheritance/relational/selfJoin","code":""},{"title":"Inheritance - Relational - union","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/inheritance/relational/union","code":""},{"title":"Innerjoin - Isolation","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/innerJoin/isolation","code":""},{"title":"Join","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/join","code":""},{"title":"Merge","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/merge","code":""},{"title":"Multigrain","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/multigrain","code":""},{"title":"Propertyfunc - simple","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/propertyfunc/simple","code":""},{"title":"Propertyfunc - withjoin","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/propertyfunc/withjoin","code":""},{"title":"SelfJoin","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/selfJoin","code":""},{"title":"Model To Model Service - Querying _Firm using json input","description":"Mapping of Firm to _Firm with tests and a service fetching _Firm output","documentation":"This project showcases a model to model mapping from `Firm` to `_Firm` outlining a mapping test and a service test for model to model.","path":"5-connect-data-to-datasources/Stores/Model Store/service/basic","code":"###Data\nData data::IBMFirmData\n{\n  ExternalFormat\n  #{\n    contentType: 'application/json';\n    data: '{\\n  \"employees\": [\\n    {\\n      \"firstName\": \"John\",\\n      \"lastName\": \"Smith\"\\n    }\\n  ],\\n  \"legalName\": \"IBM\",\\n  \"type\": \"llc\"\\n}';\n  }#\n}\n\n\n###Service\nService mapping::FirmService\n{\n  pattern: '/83a0d72d-e69d-453e-8f23-8059767aeab7';\n  ownership: DID { identifier: '' };\n  documentation: '';\n  autoActivateUpdates: true;\n  execution: Single\n  {\n    query: |model::target::_Firm.all()->graphFetch(#{model::target::_Firm{myLegalName,name,employees{fullName}}}#)->serialize(#{model::target::_Firm{myLegalName,name,employees{fullName}}}#);\n    mapping: mapping::ModelToModelMapping;\n    runtime: mapping::FirmRuntime;\n  }\n  testSuites:\n  [\n    testSuite_1:\n    {\n      data:\n      [\n        connections:\n        [\n          connection_1:\n            ExternalFormat\n            #{\n              contentType: 'application/json';\n              data: '{\\n  \"employees\": [\\n    {\\n      \"firstName\": \"John\",\\n      \"lastName\": \"Smith\"\\n    }\\n  ],\\n  \"legalName\": \"IBM\",\\n  \"type\": \"llc\"\\n}';\n            }#\n        ]\n      ]\n      tests:\n      [\n        test_1:\n        {\n          serializationFormat: PURE;\n          asserts:\n          [\n            assertion_1:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"myLegalName()\": \"my name is: IBM\",\\n  \"name\": \"IBM\",\\n  \"employees\": [\\n    {\\n      \"fullName\": \"John Smith\"\\n    }\\n  ]\\n}';\n                  }#;\n              }#\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n###Pure\nEnum model::target::IncType\n{\n  LLC,\n  CORP\n}\n\nClass model::Person\n{\n  firstName: String[1];\n  lastName: String[1];\n}\n\nClass model::Firm\n{\n  employees: model::Person[1..*];\n  legalName: String[1];\n}\n\nClass model::target::_Firm\n{\n  employees: model::target::_Person[1..*];\n  name: String[1];\n  myLegalName() {'my name is: ' + $this.name}: String[1];\n}\n\nClass model::target::_Person\n{\n  fullName: String[1];\n}\n\n\n###Mapping\nMapping mapping::ModelToModelMapping\n(\n  *model::target::_Person: Pure\n  {\n    ~src model::Person\n    fullName: $src.firstName + ' ' + $src.lastName\n  }\n  *model::target::_Firm: Pure\n  {\n    ~src model::Firm\n    employees[model_target__Person]: $src.employees,\n    name: $src.legalName\n  }\n\n  model::target::IncType: EnumerationMapping\n  {\n    LLC: ['llc'],\n    CORP: ['corp']\n  }\n\n  testSuites:\n  [\n    FirmSuite:\n    {\n      function: |model::target::_Firm.all()->graphFetch(#{model::target::_Firm{employees{fullName},name,myLegalName}}#)->serialize(#{model::target::_Firm{employees{fullName},name,myLegalName}}#);\n      tests:\n      [\n        AppleData:\n        {\n          doc: 'This test will use Apple Data and assert  the transformation.';\n          data:\n          [\n            ModelStore:\n              ModelStore\n              #{\n                model::Firm:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"employees\": [\\n    {\\n      \"firstName\": \"firstEmployeeName\",\\n      \"lastName\": \"secondEmployeeName\"\\n    }\\n  ],\\n  \"legalName\": \"Apple Inc\"\\n}';\n                  }#\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"employees\" : [ {\\n    \"fullName\" : \"firstEmployeeName secondEmployeeName\"\\n  } ],\\n  \"name\" : \"Apple Inc\",\\n  \"myLegalName()\" : \"my name is: Apple Inc\"\\n}';\n                  }#;\n              }#\n          ];\n        },\n        GoogleData:\n        {\n          data:\n          [\n            ModelStore:\n              ModelStore\n              #{\n                model::Firm:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"employees\": [\\n    {\\n      \"firstName\": \"firstEmployeeName\",\\n      \"lastName\": \"secondEmployeeName\"\\n    }\\n  ],\\n  \"legalName\": \"Google\"\\n}';\n                  }#\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\r\\n  \"employees\" : [ {\\r\\n    \"fullName\" : \"firstEmployeeName secondEmployeeName\"\\r\\n  } ],\\r\\n  \"name\" : \"Google\",\\r\\n  \"myLegalName()\" : \"my name is: Google\"\\r\\n}';\n                  }#;\n              }#\n          ];\n        },\n        IBMData:\n        {\n          doc: '';\n          data:\n          [\n            ModelStore:\n              ModelStore\n              #{\n                model::Firm:\n                  Reference\n                  #{\n                    data::IBMFirmData\n                  }#\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\r\\n  \"employees\" : [ {\\r\\n    \"fullName\" : \"John Smith\"\\r\\n  } ],\\r\\n  \"name\" : \"IBM\",\\r\\n  \"myLegalName()\" : \"my name is: IBM\"\\r\\n}';\n                  }#;\n              }#\n          ];\n        },\n        ExpectedToFail:\n        {\n          doc: '';\n          data:\n          [\n            ModelStore:\n              ModelStore\n              #{\n                model::Firm:\n                  Reference\n                  #{\n                    data::IBMFirmData\n                  }#\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"employees\" : [ {\\n    \"fullName\" : \"John Smith\"\\n  } ],\\n  \"name\" : \"IBMWhoops\",\\n  \"myLegalName()\" : \"my name is: IBM\"\\n}';\n                  }#;\n              }#\n          ];\n        }\n      ];\n    }\n  ]\n)\n\n\n###Connection\nJsonModelConnection mapping::FirmConnection\n{\n  class: model::Firm;\n  url: 'data:application/json,%7B%7D';\n}\n\n\n###Runtime\nRuntime mapping::FirmRuntime\n{\n  mappings:\n  [\n    mapping::ModelToModelMapping\n  ];\n  connections:\n  [\n    ModelStore:\n    [\n      connection_1: mapping::FirmConnection\n    ]\n  ];\n}\n"},{"title":"SqlFunction","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/sqlFunction","code":""},{"title":"Subtype","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/subtype","code":""},{"title":"Tree","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/tree","code":""},{"title":"Union - Extend","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/union/extend","code":""},{"title":"Union - MultipleChainedJoins","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/union/multipleChainedJoins","code":""},{"title":"Union - Optimized","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/union/optimized","code":""},{"title":"Union - Partial","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/union/partial","code":""},{"title":"Union - PartialForeignKeyUsage","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/union/partialForeignKeyUsage","code":""},{"title":"Union - SqlQueryMerging","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Model Store/union/sqlQueryMerging","code":""},{"title":"Relational Database Connection BigQuery with Default Credentials","description":"BigQuery connection using only default credentials. Does not include proxy.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/BigQuery/DefaultCredentials","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: BigQuery;\n  specification: BigQuery\n  {\n    projectId: 'proj1';\n    defaultDataset: 'dataset1';\n  };\n  auth: GCPApplicationDefaultCredentials;\n}\n"},{"title":"Relational Database Connection BigQuery with Default Credentials and Proxy","description":"BigQuery connection using only default credentials. Does include proxy.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/BigQuery/DefaultCredentialsWithProxy","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: BigQuery;\n  specification: BigQuery\n  {\n    projectId: 'proj1';\n    defaultDataset: 'dataset1';\n    proxyHost: 'proxyHost1';\n    proxyPort: 'proxyPort1';\n  };\n  auth: GCPApplicationDefaultCredentials;\n}\n"},{"title":"Relational Database Connection BigQuery with Identity Federation","description":"BigQuery connection using Identity Federation.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/BigQuery/IdentityFederation","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: BigQuery;\n  specification: BigQuery\n  {\n    projectId: 'proj1';\n    defaultDataset: 'dataset1';\n  };\n  auth: GCPWorkloadIdentityFederation\n  {\n    serviceAccountEmail: 'name';\n  };\n}\n"},{"title":"Relational Database Connection BigQuery with Identity Federation additional scopes","description":"BigQuery connection using Identity Federation including additional scopes.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/BigQuery/IdentityFederationWithScopes","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: BigQuery;\n  specification: BigQuery\n  {\n    projectId: 'proj1';\n    defaultDataset: 'dataset1';\n  };\n  auth: GCPWorkloadIdentityFederation\n  {\n    serviceAccountEmail: 'name';\n    additionalGcpScopes: [\n      'gcpScope',\n      'anotherGcpScope'\n      ];\n  };\n}\n"},{"title":"Relational Database Connection Databricks","description":"Examples of all valid Databricks connection specs","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/Databricks","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: Databricks;\n  specification: Databricks\n  {\n    hostname: 'databricks.com';\n    port: '443';\n    protocol: 'https';\n    httpPath: 'databricks/api/path';\n  };\n  auth: ApiToken\n  {\n    apiToken: 'databricks.api.token';\n  };\n}"},{"title":"Relational Database Connection MemSQL","description":"Examples of all valid MemSQL connection specs","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/MemSQL","code":""},{"title":"Relational Database Connection Postgres","description":"Examples of all valid Postgres connection specs","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/Postgres","code":""},{"title":"Relational Database Connection SQL Server","description":"Examples of all valid SQL Server connection specs","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/SQL Server","code":""},{"title":"Relational Database Connection Spanner","description":"Examples of all valid Spanner connection specs","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/Spanner","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection1\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n    proxyHost: 'localhost';\n    proxyPort: 9010;\n  };\n  auth: GCPApplicationDefaultCredentials;\n}\n\nRelationalDatabaseConnection connection::mySimpleConnection2\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n  };\n  auth: GCPApplicationDefaultCredentials;\n}\n\nRelationalDatabaseConnection connection::mySimpleConnection3\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n  };\n  auth: DelegatedKerberos;\n}\n\nRelationalDatabaseConnection connection::mySimpleConnection4\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n    proxyHost: 'localhost';\n    proxyPort: 9010;\n  };\n  auth: GCPWorkloadIdentityFederation\n  {\n    serviceAccountEmail: 'name';\n  };\n}\n\nRelationalDatabaseConnection connection::mySimpleConnection5\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n    proxyHost: 'localhost';\n    proxyPort: 9010;\n  };\n  auth: GCPWorkloadIdentityFederation\n  {\n    serviceAccountEmail: 'name';\n    additionalGcpScopes: [\n      'gcpScope',\n      'anotherGcpScope'\n      ];\n  };\n}"},{"title":"Relational Database Connection Trino","description":"Examples of all valid Trino connection specs","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Connection/Trino","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::TrinoConnection\n{\n  store: store::Store;\n  type: Trino;\n  specification: Trino\n  {\n    host: 'host';\n    port: 1234;\n    catalog: 'tpch';\n    schema: 'tiny';\n    clientTags: 'cg::vega';\n    sslSpecification:\n    {\n      ssl: false;\n      trustStorePathVaultReference: 'abc12cde';\n      trustStorePasswordVaultReference: 'abc12cde';\n    };\n  };\n  auth: TrinoDelegatedKerberos\n  {\n    kerberosUseCanonicalHostname: false;\n    kerberosRemoteServiceName: 'HTTP';\n  };\n}"},{"title":"Basic Relational Database Specification","description":"Example of database specification with no explicit schema or joins","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Basic","code":"###Relational\nDatabase store::SimpleDB\n(\n  // There is an implicit 'default' schema \n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n)\n"},{"title":"Relational Database Specification with Filter","description":"Example of database specification with Filter","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Filter","code":"###Relational\nDatabase store::SimpleDB\n(\n  // There is an implicit 'default' schema \n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n\n  // Filters at the database level can be shared with several mappings\n  Filter largePersonIds(People.id > 100)\n)\n"},{"title":"Basic Relational Database Specification with Includes","description":"Example of database specification with other Database definitions included","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Include","code":"###Relational\nDatabase store::SimpleDB\n(\n  include store::IncludedDB\n\n  // Definitions in included DB are available here\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n)\n\nDatabase store::IncludedDB\n(\n  Table PeoplePart2\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n)"},{"title":"Relational Database Specification with Milestoning","description":"Example of database specification with Milestoning","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Join/Basic","code":"###Relational\nDatabase store::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n\n  Join PersonCompany(People.firm_id = Firms.id)\n  // Joins can also be defined across schemas\n)\n"},{"title":"Relational Database Specification with Join placeholder","description":"Example of database specification with join placeholder.","documentation":"TODO: explain what this feature is useful for.","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Join/Self Join","code":"###Relational\nDatabase store::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n\n  Join PersonCompany(People.id = {target}.firm_id)\n)\n"},{"title":"Relational Database Specification with Bitemporal Milestoning","description":"Example of database specification with Bitemporal Milestoning.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Milestoning/Bitemporal","code":"###Relational\nDatabase store::MilestonedDB\n(\n  Table BiTemporalProductTable\n  (\n    milestoning\n    (\n      processing(PROCESSING_IN = in_z, PROCESSING_OUT = out_z, INFINITY_DATE = %9999-12-31T00:00:00.0000),\n      business(BUS_FROM = from_z, BUS_THRU = thru_z, INFINITY_DATE = %9999-12-31T00:00:00.0000)\n    )\n\n    id INTEGER PRIMARY KEY,\n    type VARCHAR(200),\n    in_z DATE,\n    out_z DATE,\n    from_z DATE,\n    thru_z DATE\n  )\n)"},{"title":"Relational Database Specification with Business Milestoning","description":"Example of database specification with Business Milestoning.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Milestoning/Business","code":"###Relational\nDatabase store::MilestonedDB\n(\n  Table ProductTable\n  (\n    milestoning\n    (\n      // A subset of the following options can be used with the minimal being BUS_FROM and BUS_THRU\n      business(BUS_FROM = from_z, BUS_THRU = thru_z, THRU_IS_INCLUSIVE = true, INFINITY_DATE = %9999-12-31T00:00:00.0000)\n    )\n\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200) PRIMARY KEY,\n    type VARCHAR(200),\n    exchange VARCHAR(200),\n    classificationSystemId INTEGER,\n    referenceSystemName VARCHAR(200),\n    externalReferenceSystemName VARCHAR(200),\n    from_z DATE,\n    thru_z DATE\n  )\n  Table ProductTableWithBusinessSnapshotMilestoning\n  (\n    milestoning\n    (\n      business(BUS_SNAPSHOT_DATE = snapshotDate)\n    )\n\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    type VARCHAR(200),\n    snapshotDate DATE\n  )\n)\n"},{"title":"Relational Database Specification with Processing Milestoning","description":"Example of database specification with Temporal Milestoning.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Milestoning/Processing","code":"###Relational\nDatabase store::MilestonedDB\n(\n  Table BiTemporalProductTableWithProcessingMilestoning\n  (\n    milestoning\n    (\n      // The minimal set of options is PROCESSING_IN and PROCESSING_OUT\n      processing(PROCESSING_IN = in_z, PROCESSING_OUT = out_z, OUT_IS_INCLUSIVE = true, INFINITY_DATE = %9999-12-31T00:00:00.0000)\n    )\n\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    type VARCHAR(200),\n    in_z DATE,\n    out_z DATE\n  )\n)\n"},{"title":"Relational Database Specification with explicit Schema","description":"Example of database specification with explicit schema","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/Schema","code":"###Relational\nDatabase store::SimpleDB\n(\n  Schema SimpleSchema\n  (\n    Table People\n    (\n      id INTEGER PRIMARY KEY,\n      name VARCHAR(200),\n      firm_id INTEGER\n    )\n    Table Firms\n    (\n      id INTEGER PRIMARY KEY,\n      legal_name VARCHAR(200)\n    )\n  )\n  // Joins go outside the schema\n)\n"},{"title":"Relational Database Specification with Views","description":"Example of database specification with Views.","documentation":"Views are effectively transformations at the database level. They have the same syntax as Mappings but have a few different features.\nTODO: include a description on why views are required.","path":"5-connect-data-to-datasources/Stores/Relational Store/Database Specification/View","code":"###Relational\nDatabase store::SimpleDB\n(\n  Schema SimpleSchema\n  (\n    Table People\n    (\n      id INTEGER PRIMARY KEY,\n      name VARCHAR(200),\n      firm_id INTEGER\n    )\n    Table Firms\n    (\n      id INTEGER PRIMARY KEY,\n      legal_name VARCHAR(200)\n    )\n\n    View ImportantPeople\n    (\n      id: SimpleSchema.People.id PRIMARY KEY,\n      name: SimpleSchema.People.name\n    )\n  )\n)\n"},{"title":"Relational Database Distinct Mapping","description":"A simple example of a mapping containing a distinct operator.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Distinct","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleDistinctMapping\n(\n  Person: Relational\n  {\n    ~distinct\n    name: [SimpleDB]People.name\n  }\n)\n\n\n###Pure\nClass models::Person\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(100)\n  )\n)\n"},{"title":"Relational Database Embedded Inline Mapping","description":"An example of an inline mapping.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Embedded/Inline","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleInlineMapping\n(\n  Person[normalPerson]: Relational\n  {\n    name: [SimpleDB]People.name,\n    address() Inline[USAddress],\n    hobby\n    (\n      name: [SimpleDB]People.hobby_name\n    )\n  }\n  Address[USAddress]: Relational\n  {\n    ~mainTable [SimpleDB]Addresses\n    street_address: [SimpleDB]Addresses.street_address,\n    zip: [SimpleDB]US_Zips.zip_code\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n  address: Address[1];\n  hobby: Hobby[1];\n}\n\nClass models::Hobby\n{\n  name: String[1];\n}\n\nClass models::Address\n{\n  street_address: String[1];\n  zip: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    hobby_name VARCHAR(100)\n  )\n  Table Addresses\n  (\n    street_address VARCHAR(200)\n  )\n  Table US_Zips\n  (\n    zip_code CHAR(5)\n  )\n)\n"},{"title":"Relational Database Otherwise Mapping","description":"A simple example of a mapping containing the otherwise operator.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Embedded/Otherwise","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleOtherwiseMapping\n(\n  Person: Relational\n  {\n    name: [SimpleDB]People.name,\n    pet\n    (\n      name: [SimpleDB]People.pet_name\n    ) Otherwise ([backupPetMapping]: [SimpleDB]@PetOwner)\n  }\n  Pet[backupPetMapping]: Relational\n  {\n    name: [SimpleDB]Pets.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n  pet: Pet[1];\n}\n\nClass models::Pet\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    pet_id INTEGER,\n    pet_name VARCHAR(50)\n  )\n  Table Pets\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n  )\n\n  Join PetOwner(People.pet_id = Pets.id)\n)\n"},{"title":"Relational Database Mapping with Inheritance","description":"A simple example of a mapping that demonstrates inheritance through the extends keyword.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Extends","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleInheritanceMapping\n(\n  Person[basePerson]: Relational\n  {\n    name: [SimpleDB]People.name\n  }\n  PromotableWorker[promotableWorker] extends [basePerson]: Relational\n  {\n    available_promotion_titles: [SimpleDB]Promotions.title\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\nClass models::PromotableWorker\n{\n  available_promotion_titles: String[1..*];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n  Table Promotions\n  (\n    title VARCHAR(50)\n  )\n)\n"},{"title":"Relational Database Filter Mapping","description":"A simple example of a mapping that uses a filter.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Filter","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleFilterMapping\n(\n  Person: Relational\n  {\n    ~filter [SimpleDB]longNameFilter\n    name: [SimpleDB]People.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n\n  Filter longNameFilter(length(People.name) >= 100)\n)\n"},{"title":"Relational Database GroupBy Mapping","description":"A simple example of a mapping using the groupBy operator.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/GroupBy","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleGroupByMapping\n(\n  Person: Relational\n  {\n    ~groupBy\n    (\n      [SimpleDB]People.firm_id\n    )\n    name: [SimpleDB]People.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n)\n"},{"title":"Relational Database Mapping with Includes","description":"An example of a Mapping with include statements.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Include/Basic","code":"###Mapping\nimport models::*;\nimport stores::*;\nimport mappings::*;\nMapping mappings::IncludeMapping\n(\n  include mapping BaseMapping\n\n  Person: Relational\n  {\n    name: [SimpleDB]People.name\n  }\n)\n\nMapping mappings::BaseMapping\n(\n  Firm: Relational\n  {\n    name: [SimpleDB]Firms.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n\n  Join FirmPerson(People.firm_id = Firms.id)\n)\n"},{"title":"Relational Database Mapping with Store Substitution","description":"An example of a Mapping using store substitution across mappings.","documentation":"Store substitution changes the store used in the included mapping.","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Include/Store Substitution","code":"###Mapping\nimport models::*;\nimport stores::*;\nimport mappings::*;\nMapping mappings::IncludeSubstitutionMapping\n(\n  include mapping BaseMapping[SimpleDB->ComplexDB]\n\n  Person: Relational\n  {\n    name: [ComplexDB]People.name\n  }\n)\n\nMapping mappings::BaseMapping\n(\n  Firm: Relational\n  {\n    name: [SimpleDB]Firms.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n)\n\nDatabase stores::ComplexDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_sector VARCHAR(50)\n  )\n)"},{"title":"Relational Database Mapping with Joins","description":"A simple example of a mapping with a join.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Joins/Basic","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleJoinMapping\n(\n  Person: Relational\n  {\n    name: [SimpleDB]People.name,\n    firm: [SimpleDB]@FirmPerson,\n    pet_name: [SimpleDB]@PersonPet | [SimpleDB]Pets.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n  firm: Firm[1];\n  pet_name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\nClass models::Pet\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER,\n    pet_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n  Table Pets\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n  )\n\n  Join FirmPerson(People.firm_id = Firms.id)\n  Join PersonPet(People.pet_id = Pets.id)\n)\n"},{"title":"Relational Database Mapping with Chained Joins","description":"An example of a Mapping with Chained joins including setting join type.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Joins/Chained","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mappings::ChainedJoinMapping\n(\n  Person: Relational\n  {\n    name: [SimpleDB]People.name,\n    firm: [SimpleDB]@FirmPerson,\n    good_pet_name: [SimpleDB]@PersonPet > (INNER) [SimpleDB]@GoodPets | [SimpleDB]Pets.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n  firm: Firm[1];\n  good_pet_name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\nClass models::Pet\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER,\n    pet_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n  Table Pets\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n  )\n  Table GoodPets\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n  )\n\n  Join FirmPerson(People.firm_id = Firms.id)\n  Join PersonPet(People.pet_id = Pets.id)\n  Join GoodPets(Pets.id = GoodPets.id)\n)\n"},{"title":"Relational Database Mapping with Scoped Block","description":"An example of a Mapping using a scoped block for readability.","documentation":"","path":"5-connect-data-to-datasources/Stores/Relational Store/Mapping/Scope","code":"###Mapping\nimport stores::*;\nimport models::*;\nMapping mappings::SimpleScopedMapping\n(\n  Person: Relational\n  {\n    // scope([SimpleDB]SimpleSchema.People) can be used to extract the prefix\n    // it is just syntactic sugar and will be string replaced.\n    name: [SimpleDB]SimpleSchema.People.name\n  }\n)\n\n\n###Pure\nClass models::Person\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Schema SimpleSchema\n  (\n    Table People\n    (\n      id INTEGER PRIMARY KEY,\n      name VARCHAR(200)\n    )\n  )\n)"},{"title":"Relational Service - Querying Product Northwind Data","description":"Example of Relational Service querying northwind test data with Mapping and Service Tests","documentation":"The connection uses here loads sample data from northwind. See https://github.com/pthom/northwind_psql for more info as well as the model. It includes a sample service querying products. Additionally it includes services and mapping tests.","path":"5-connect-data-to-datasources/Stores/Relational Store/Service/Basic","code":"###Service\nService service::SimpleProductService\n{\n  pattern: '/ed49e48b-1536-4d04-9b6f-ad3a8ed6daf9';\n  ownership: DID { identifier: '' };\n  documentation: '';\n  autoActivateUpdates: true;\n  execution: Single\n  {\n    query: |store::NORTHWIND::Products.all()->project([x|$x.categoryId, x|$x.discontinued, x|$x.productId, x|$x.productName, x|$x.quantityPerUnit, x|$x.reorderLevel, x|$x.supplierId, x|$x.unitPrice, x|$x.unitsInStock, x|$x.unitsOnOrder], ['Category Id', 'Discontinued', 'Product Id', 'Product Name', 'Quantity Per Unit', 'Reorder Level', 'Supplier Id', 'Unit Price', 'Units In Stock', 'Units On Order']);\n    mapping: store::MyDatabaseMapping;\n    runtime: model::NorthWindRuntime;\n  }\n  testSuites:\n  [\n    testSuite_1:\n    {\n      data:\n      [\n        connections:\n        [\n          connection_1:\n            Relational\n            #{\n              NORTHWIND.PRODUCTS:\n                'PRODUCT_ID,PRODUCT_NAME,SUPPLIER_ID,CATEGORY_ID,QUANTITY_PER_UNIT,UNITS_IN_STOCK,UNITS_ON_ORDER,REORDER_LEVEL,DISCONTINUED\\n'+\n                '1,MyProduct,1,2,20,2,4,10,0\\n';\n            }#\n        ]\n      ]\n      tests:\n      [\n        test_1:\n        {\n          serializationFormat: PURE_TDSOBJECT;\n          asserts:\n          [\n            assertion_1:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '[\\n  {\\n    \"Category Id\": 2,\\n    \"Discontinued\": 0,\\n    \"Product Id\": 1,\\n    \"Product Name\": \"MyProduct\",\\n    \"Quantity Per Unit\": \"20\",\\n    \"Reorder Level\": 10,\\n    \"Supplier Id\": 1,\\n    \"Unit Price\": null,\\n    \"Units In Stock\": 2,\\n    \"Units On Order\": 4\\n  }\\n]';\n                  }#;\n              }#\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n###Relational\nDatabase store::MyDatabase\n(\n  Schema NORTHWIND\n  (\n    Table CATEGORIES\n    (\n      CATEGORY_ID SMALLINT PRIMARY KEY,\n      CATEGORY_NAME VARCHAR(15) NOT NULL,\n      DESCRIPTION VARCHAR(256),\n      PICTURE OTHER\n    )\n    Table CUSTOMERS\n    (\n      CUSTOMER_ID VARCHAR(5) PRIMARY KEY,\n      COMPANY_NAME VARCHAR(40) NOT NULL,\n      CONTACT_NAME VARCHAR(30),\n      CONTACT_TITLE VARCHAR(30),\n      ADDRESS VARCHAR(60),\n      CITY VARCHAR(15),\n      REGION VARCHAR(15),\n      POSTAL_CODE VARCHAR(10),\n      COUNTRY VARCHAR(15),\n      PHONE VARCHAR(24),\n      FAX VARCHAR(24)\n    )\n    Table CUSTOMER_CUSTOMER_DEMO\n    (\n      CUSTOMER_ID VARCHAR(5) PRIMARY KEY,\n      CUSTOMER_TYPE_ID VARCHAR(5) PRIMARY KEY\n    )\n    Table CUSTOMER_DEMOGRAPHICS\n    (\n      CUSTOMER_TYPE_ID VARCHAR(5) PRIMARY KEY,\n      CUSTOMER_DESC VARCHAR(256)\n    )\n    Table EMPLOYEES\n    (\n      EMPLOYEE_ID SMALLINT PRIMARY KEY,\n      LAST_NAME VARCHAR(20) NOT NULL,\n      FIRST_NAME VARCHAR(10) NOT NULL,\n      TITLE VARCHAR(30),\n      TITLE_OF_COURTESY VARCHAR(25),\n      BIRTH_DATE DATE,\n      HIRE_DATE DATE,\n      ADDRESS VARCHAR(60),\n      CITY VARCHAR(15),\n      REGION VARCHAR(15),\n      POSTAL_CODE VARCHAR(10),\n      COUNTRY VARCHAR(15),\n      HOME_PHONE VARCHAR(24),\n      EXTENSION VARCHAR(4),\n      PHOTO OTHER,\n      NOTES OTHER,\n      REPORTS_TO SMALLINT,\n      PHOTO_PATH VARCHAR(255)\n    )\n    Table EMPLOYEE_TERRITORIES\n    (\n      EMPLOYEE_ID SMALLINT PRIMARY KEY,\n      TERRITORY_ID VARCHAR(20) PRIMARY KEY\n    )\n    Table ORDERS\n    (\n      ORDER_ID SMALLINT PRIMARY KEY,\n      CUSTOMER_ID VARCHAR(5),\n      EMPLOYEE_ID SMALLINT,\n      ORDER_DATE DATE,\n      REQUIRED_DATE DATE,\n      SHIPPED_DATE DATE,\n      SHIP_VIA SMALLINT,\n      FREIGHT OTHER,\n      SHIP_NAME VARCHAR(40),\n      SHIP_ADDRESS VARCHAR(60),\n      SHIP_CITY VARCHAR(15),\n      SHIP_REGION VARCHAR(15),\n      SHIP_POSTAL_CODE VARCHAR(10),\n      SHIP_COUNTRY VARCHAR(15)\n    )\n    Table ORDER_DETAILS\n    (\n      ORDER_ID SMALLINT PRIMARY KEY,\n      PRODUCT_ID SMALLINT PRIMARY KEY,\n      UNIT_PRICE OTHER NOT NULL,\n      QUANTITY SMALLINT NOT NULL,\n      DISCOUNT OTHER NOT NULL\n    )\n    Table PRODUCTS\n    (\n      PRODUCT_ID SMALLINT PRIMARY KEY,\n      PRODUCT_NAME VARCHAR(40) NOT NULL,\n      SUPPLIER_ID SMALLINT,\n      CATEGORY_ID SMALLINT,\n      QUANTITY_PER_UNIT VARCHAR(20),\n      UNIT_PRICE OTHER,\n      UNITS_IN_STOCK SMALLINT,\n      UNITS_ON_ORDER SMALLINT,\n      REORDER_LEVEL SMALLINT,\n      DISCONTINUED INTEGER NOT NULL\n    )\n    Table REGION\n    (\n      REGION_ID SMALLINT PRIMARY KEY,\n      REGION_DESCRIPTION VARCHAR(60) NOT NULL\n    )\n    Table SHIPPERS\n    (\n      SHIPPER_ID SMALLINT PRIMARY KEY,\n      COMPANY_NAME VARCHAR(40) NOT NULL,\n      PHONE VARCHAR(24)\n    )\n    Table SUPPLIERS\n    (\n      SUPPLIER_ID SMALLINT PRIMARY KEY,\n      COMPANY_NAME VARCHAR(40) NOT NULL,\n      CONTACT_NAME VARCHAR(30),\n      CONTACT_TITLE VARCHAR(30),\n      ADDRESS VARCHAR(60),\n      CITY VARCHAR(15),\n      REGION VARCHAR(15),\n      POSTAL_CODE VARCHAR(10),\n      COUNTRY VARCHAR(15),\n      PHONE VARCHAR(24),\n      FAX VARCHAR(24),\n      HOMEPAGE VARCHAR(256)\n    )\n    Table TERRITORIES\n    (\n      TERRITORY_ID VARCHAR(20) PRIMARY KEY,\n      TERRITORY_DESCRIPTION VARCHAR(60) NOT NULL,\n      REGION_ID SMALLINT NOT NULL\n    )\n    Table US_STATES\n    (\n      STATE_ID SMALLINT PRIMARY KEY,\n      STATE_NAME VARCHAR(100),\n      STATE_ABBR VARCHAR(2),\n      STATE_REGION VARCHAR(50)\n    )\n  )\n)\n\n\n###Pure\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::OrderDetails\n{\n  orderId: Integer[1];\n  productId: Integer[1];\n  unitPrice: String[1];\n  quantity: Integer[1];\n  discount: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::CustomerDemographics\n{\n  customerTypeId: String[1];\n  customerDesc: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Shippers\n{\n  shipperId: Integer[1];\n  companyName: String[1];\n  phone: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::CustomerCustomerDemo\n{\n  customerId: String[1];\n  customerTypeId: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Employees\n{\n  employeeId: Integer[1];\n  lastName: String[1];\n  firstName: String[1];\n  title: String[0..1];\n  titleOfCourtesy: String[0..1];\n  birthDate: StrictDate[0..1];\n  hireDate: StrictDate[0..1];\n  address: String[0..1];\n  city: String[0..1];\n  region: String[0..1];\n  postalCode: String[0..1];\n  country: String[0..1];\n  homePhone: String[0..1];\n  extension: String[0..1];\n  photo: String[0..1];\n  notes: String[0..1];\n  reportsTo: Integer[0..1];\n  photoPath: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Territories\n{\n  territoryId: String[1];\n  territoryDescription: String[1];\n  regionId: Integer[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Customers\n{\n  customerId: String[1];\n  companyName: String[1];\n  contactName: String[0..1];\n  contactTitle: String[0..1];\n  address: String[0..1];\n  city: String[0..1];\n  region: String[0..1];\n  postalCode: String[0..1];\n  country: String[0..1];\n  phone: String[0..1];\n  fax: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Region\n{\n  regionId: Integer[1];\n  regionDescription: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::EmployeeTerritories\n{\n  employeeId: Integer[1];\n  territoryId: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Products\n{\n  productId: Integer[1];\n  productName: String[1];\n  supplierId: Integer[0..1];\n  categoryId: Integer[0..1];\n  quantityPerUnit: String[0..1];\n  unitPrice: String[0..1];\n  unitsInStock: Integer[0..1];\n  unitsOnOrder: Integer[0..1];\n  reorderLevel: Integer[0..1];\n  discontinued: Integer[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Categories\n{\n  categoryId: Integer[1];\n  categoryName: String[1];\n  description: String[0..1];\n  picture: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::UsStates\n{\n  stateId: Integer[1];\n  stateName: String[0..1];\n  stateAbbr: String[0..1];\n  stateRegion: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Orders\n{\n  orderId: Integer[1];\n  customerId: String[0..1];\n  employeeId: Integer[0..1];\n  orderDate: StrictDate[0..1];\n  requiredDate: StrictDate[0..1];\n  shippedDate: StrictDate[0..1];\n  shipVia: Integer[0..1];\n  freight: String[0..1];\n  shipName: String[0..1];\n  shipAddress: String[0..1];\n  shipCity: String[0..1];\n  shipRegion: String[0..1];\n  shipPostalCode: String[0..1];\n  shipCountry: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Suppliers\n{\n  supplierId: Integer[1];\n  companyName: String[1];\n  contactName: String[0..1];\n  contactTitle: String[0..1];\n  address: String[0..1];\n  city: String[0..1];\n  region: String[0..1];\n  postalCode: String[0..1];\n  country: String[0..1];\n  phone: String[0..1];\n  fax: String[0..1];\n  homepage: String[0..1];\n}\n\n\n###Mapping\nMapping store::MyDatabaseMapping\n(\n  *store::NORTHWIND::Categories[store_NORTHWIND_Categories]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.CATEGORIES.CATEGORY_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.CATEGORIES\n    categoryId: [store::MyDatabase]NORTHWIND.CATEGORIES.CATEGORY_ID,\n    categoryName: [store::MyDatabase]NORTHWIND.CATEGORIES.CATEGORY_NAME,\n    description: [store::MyDatabase]NORTHWIND.CATEGORIES.DESCRIPTION,\n    picture: [store::MyDatabase]NORTHWIND.CATEGORIES.PICTURE\n  }\n  *store::NORTHWIND::Customers[store_NORTHWIND_Customers]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.CUSTOMERS.CUSTOMER_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.CUSTOMERS\n    customerId: [store::MyDatabase]NORTHWIND.CUSTOMERS.CUSTOMER_ID,\n    companyName: [store::MyDatabase]NORTHWIND.CUSTOMERS.COMPANY_NAME,\n    contactName: [store::MyDatabase]NORTHWIND.CUSTOMERS.CONTACT_NAME,\n    contactTitle: [store::MyDatabase]NORTHWIND.CUSTOMERS.CONTACT_TITLE,\n    address: [store::MyDatabase]NORTHWIND.CUSTOMERS.ADDRESS,\n    city: [store::MyDatabase]NORTHWIND.CUSTOMERS.CITY,\n    region: [store::MyDatabase]NORTHWIND.CUSTOMERS.REGION,\n    postalCode: [store::MyDatabase]NORTHWIND.CUSTOMERS.POSTAL_CODE,\n    country: [store::MyDatabase]NORTHWIND.CUSTOMERS.COUNTRY,\n    phone: [store::MyDatabase]NORTHWIND.CUSTOMERS.PHONE,\n    fax: [store::MyDatabase]NORTHWIND.CUSTOMERS.FAX\n  }\n  *store::NORTHWIND::CustomerCustomerDemo[store_NORTHWIND_CustomerCustomerDemo]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO.CUSTOMER_ID,\n      [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO.CUSTOMER_TYPE_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO\n    customerId: [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO.CUSTOMER_ID,\n    customerTypeId: [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO.CUSTOMER_TYPE_ID\n  }\n  *store::NORTHWIND::CustomerDemographics[store_NORTHWIND_CustomerDemographics]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.CUSTOMER_DEMOGRAPHICS.CUSTOMER_TYPE_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.CUSTOMER_DEMOGRAPHICS\n    customerTypeId: [store::MyDatabase]NORTHWIND.CUSTOMER_DEMOGRAPHICS.CUSTOMER_TYPE_ID,\n    customerDesc: [store::MyDatabase]NORTHWIND.CUSTOMER_DEMOGRAPHICS.CUSTOMER_DESC\n  }\n  *store::NORTHWIND::Employees[store_NORTHWIND_Employees]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.EMPLOYEES.EMPLOYEE_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.EMPLOYEES\n    employeeId: [store::MyDatabase]NORTHWIND.EMPLOYEES.EMPLOYEE_ID,\n    lastName: [store::MyDatabase]NORTHWIND.EMPLOYEES.LAST_NAME,\n    firstName: [store::MyDatabase]NORTHWIND.EMPLOYEES.FIRST_NAME,\n    title: [store::MyDatabase]NORTHWIND.EMPLOYEES.TITLE,\n    titleOfCourtesy: [store::MyDatabase]NORTHWIND.EMPLOYEES.TITLE_OF_COURTESY,\n    birthDate: [store::MyDatabase]NORTHWIND.EMPLOYEES.BIRTH_DATE,\n    hireDate: [store::MyDatabase]NORTHWIND.EMPLOYEES.HIRE_DATE,\n    address: [store::MyDatabase]NORTHWIND.EMPLOYEES.ADDRESS,\n    city: [store::MyDatabase]NORTHWIND.EMPLOYEES.CITY,\n    region: [store::MyDatabase]NORTHWIND.EMPLOYEES.REGION,\n    postalCode: [store::MyDatabase]NORTHWIND.EMPLOYEES.POSTAL_CODE,\n    country: [store::MyDatabase]NORTHWIND.EMPLOYEES.COUNTRY,\n    homePhone: [store::MyDatabase]NORTHWIND.EMPLOYEES.HOME_PHONE,\n    extension: [store::MyDatabase]NORTHWIND.EMPLOYEES.EXTENSION,\n    photo: [store::MyDatabase]NORTHWIND.EMPLOYEES.PHOTO,\n    notes: [store::MyDatabase]NORTHWIND.EMPLOYEES.NOTES,\n    reportsTo: [store::MyDatabase]NORTHWIND.EMPLOYEES.REPORTS_TO,\n    photoPath: [store::MyDatabase]NORTHWIND.EMPLOYEES.PHOTO_PATH\n  }\n  *store::NORTHWIND::EmployeeTerritories[store_NORTHWIND_EmployeeTerritories]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES.EMPLOYEE_ID,\n      [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES.TERRITORY_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES\n    employeeId: [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES.EMPLOYEE_ID,\n    territoryId: [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES.TERRITORY_ID\n  }\n  *store::NORTHWIND::Orders[store_NORTHWIND_Orders]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.ORDERS.ORDER_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.ORDERS\n    orderId: [store::MyDatabase]NORTHWIND.ORDERS.ORDER_ID,\n    customerId: [store::MyDatabase]NORTHWIND.ORDERS.CUSTOMER_ID,\n    employeeId: [store::MyDatabase]NORTHWIND.ORDERS.EMPLOYEE_ID,\n    orderDate: [store::MyDatabase]NORTHWIND.ORDERS.ORDER_DATE,\n    requiredDate: [store::MyDatabase]NORTHWIND.ORDERS.REQUIRED_DATE,\n    shippedDate: [store::MyDatabase]NORTHWIND.ORDERS.SHIPPED_DATE,\n    shipVia: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_VIA,\n    freight: [store::MyDatabase]NORTHWIND.ORDERS.FREIGHT,\n    shipName: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_NAME,\n    shipAddress: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_ADDRESS,\n    shipCity: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_CITY,\n    shipRegion: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_REGION,\n    shipPostalCode: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_POSTAL_CODE,\n    shipCountry: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_COUNTRY\n  }\n  *store::NORTHWIND::OrderDetails[store_NORTHWIND_OrderDetails]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.ORDER_DETAILS.ORDER_ID,\n      [store::MyDatabase]NORTHWIND.ORDER_DETAILS.PRODUCT_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.ORDER_DETAILS\n    orderId: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.ORDER_ID,\n    productId: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.PRODUCT_ID,\n    unitPrice: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.UNIT_PRICE,\n    quantity: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.QUANTITY,\n    discount: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.DISCOUNT\n  }\n  *store::NORTHWIND::Products[store_NORTHWIND_Products]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.PRODUCTS.PRODUCT_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.PRODUCTS\n    productId: [store::MyDatabase]NORTHWIND.PRODUCTS.PRODUCT_ID,\n    productName: [store::MyDatabase]NORTHWIND.PRODUCTS.PRODUCT_NAME,\n    supplierId: [store::MyDatabase]NORTHWIND.PRODUCTS.SUPPLIER_ID,\n    categoryId: [store::MyDatabase]NORTHWIND.PRODUCTS.CATEGORY_ID,\n    quantityPerUnit: [store::MyDatabase]NORTHWIND.PRODUCTS.QUANTITY_PER_UNIT,\n    unitPrice: [store::MyDatabase]NORTHWIND.PRODUCTS.UNIT_PRICE,\n    unitsInStock: [store::MyDatabase]NORTHWIND.PRODUCTS.UNITS_IN_STOCK,\n    unitsOnOrder: [store::MyDatabase]NORTHWIND.PRODUCTS.UNITS_ON_ORDER,\n    reorderLevel: [store::MyDatabase]NORTHWIND.PRODUCTS.REORDER_LEVEL,\n    discontinued: [store::MyDatabase]NORTHWIND.PRODUCTS.DISCONTINUED\n  }\n  *store::NORTHWIND::Region[store_NORTHWIND_Region]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.REGION.REGION_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.REGION\n    regionId: [store::MyDatabase]NORTHWIND.REGION.REGION_ID,\n    regionDescription: [store::MyDatabase]NORTHWIND.REGION.REGION_DESCRIPTION\n  }\n  *store::NORTHWIND::Shippers[store_NORTHWIND_Shippers]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.SHIPPERS.SHIPPER_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.SHIPPERS\n    shipperId: [store::MyDatabase]NORTHWIND.SHIPPERS.SHIPPER_ID,\n    companyName: [store::MyDatabase]NORTHWIND.SHIPPERS.COMPANY_NAME,\n    phone: [store::MyDatabase]NORTHWIND.SHIPPERS.PHONE\n  }\n  *store::NORTHWIND::Suppliers[store_NORTHWIND_Suppliers]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.SUPPLIERS.SUPPLIER_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.SUPPLIERS\n    supplierId: [store::MyDatabase]NORTHWIND.SUPPLIERS.SUPPLIER_ID,\n    companyName: [store::MyDatabase]NORTHWIND.SUPPLIERS.COMPANY_NAME,\n    contactName: [store::MyDatabase]NORTHWIND.SUPPLIERS.CONTACT_NAME,\n    contactTitle: [store::MyDatabase]NORTHWIND.SUPPLIERS.CONTACT_TITLE,\n    address: [store::MyDatabase]NORTHWIND.SUPPLIERS.ADDRESS,\n    city: [store::MyDatabase]NORTHWIND.SUPPLIERS.CITY,\n    region: [store::MyDatabase]NORTHWIND.SUPPLIERS.REGION,\n    postalCode: [store::MyDatabase]NORTHWIND.SUPPLIERS.POSTAL_CODE,\n    country: [store::MyDatabase]NORTHWIND.SUPPLIERS.COUNTRY,\n    phone: [store::MyDatabase]NORTHWIND.SUPPLIERS.PHONE,\n    fax: [store::MyDatabase]NORTHWIND.SUPPLIERS.FAX,\n    homepage: [store::MyDatabase]NORTHWIND.SUPPLIERS.HOMEPAGE\n  }\n  *store::NORTHWIND::Territories[store_NORTHWIND_Territories]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.TERRITORIES.TERRITORY_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.TERRITORIES\n    territoryId: [store::MyDatabase]NORTHWIND.TERRITORIES.TERRITORY_ID,\n    territoryDescription: [store::MyDatabase]NORTHWIND.TERRITORIES.TERRITORY_DESCRIPTION,\n    regionId: [store::MyDatabase]NORTHWIND.TERRITORIES.REGION_ID\n  }\n  *store::NORTHWIND::UsStates[store_NORTHWIND_UsStates]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.US_STATES.STATE_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.US_STATES\n    stateId: [store::MyDatabase]NORTHWIND.US_STATES.STATE_ID,\n    stateName: [store::MyDatabase]NORTHWIND.US_STATES.STATE_NAME,\n    stateAbbr: [store::MyDatabase]NORTHWIND.US_STATES.STATE_ABBR,\n    stateRegion: [store::MyDatabase]NORTHWIND.US_STATES.STATE_REGION\n  }\n\n  testSuites:\n  [\n    ProductSuite:\n    {\n      function: |store::NORTHWIND::Products.all()->project([x|$x.categoryId, x|$x.discontinued, x|$x.productId, x|$x.productName, x|$x.quantityPerUnit, x|$x.reorderLevel, x|$x.supplierId, x|$x.unitPrice, x|$x.unitsInStock, x|$x.unitsOnOrder], ['Category Id', 'Discontinued', 'Product Id', 'Product Name', 'Quantity Per Unit', 'Reorder Level', 'Supplier Id', 'Unit Price', 'Units In Stock', 'Units On Order']);\n      tests:\n      [\n        productTest:\n        {\n          data:\n          [\n            store::MyDatabase:\n              Relational\n              #{\n                NORTHWIND.PRODUCTS:\n                  'PRODUCT_ID,PRODUCT_NAME,SUPPLIER_ID,CATEGORY_ID,QUANTITY_PER_UNIT,UNITS_IN_STOCK,UNITS_ON_ORDER,REORDER_LEVEL,DISCONTINUED\\n'+\n                  '1,MyProduct,1,2,20,2,4,10,0\\n';\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '[ {\\r\\n  \"Category Id\" : 2,\\r\\n  \"Discontinued\" : 0,\\r\\n  \"Product Id\" : 1,\\r\\n  \"Product Name\" : \"MyProduct\",\\r\\n  \"Quantity Per Unit\" : \"20\",\\r\\n  \"Reorder Level\" : 10,\\r\\n  \"Supplier Id\" : 1,\\r\\n  \"Unit Price\" : null,\\r\\n  \"Units In Stock\" : 2,\\r\\n  \"Units On Order\" : 4\\r\\n} ]';\n                  }#;\n              }#\n          ];\n        }\n      ];\n    }\n  ]\n)\n\n\n###Connection\nRelationalDatabaseConnection model::NorthWindH2Connection\n{\n  store: store::MyDatabase;\n  type: H2;\n  specification: LocalH2\n  {\n    testDataSetupSqls: [\n      '-- loads sample data for getting started. See https://github.com/pthom/northwind_psql for more info\\n call loadNorthwindData()'\n      ];\n  };\n  auth: DefaultH2;\n}\n\n\n###Runtime\nRuntime model::NorthWindRuntime\n{\n  mappings:\n  [\n    store::MyDatabaseMapping\n  ];\n  connections:\n  [\n    store::MyDatabase:\n    [\n      connection_1: model::NorthWindH2Connection\n    ]\n  ];\n}\n"},{"title":"Service Store","documentation":"TODO: Some dummy description","development":true,"path":"5-connect-data-to-datasources/Stores/Service Store","code":""},{"title":"Function Activators","documentation":"TODO: Some dummy description","development":true,"path":"8-create-and-manage-data-model-apis/Function Activators","code":""}]