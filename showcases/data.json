[{"title":"Build a Relational service","documentation":"TODO: Some dummy description","development":true,"path":"End-to-end examples/Build a relational service","code":""},{"title":"Build an M2M hosted service","documentation":"TODO: Some dummy description","development":true,"path":"End-to-end examples/Build an M2M hosted service","code":""},{"title":"Build Model From database","documentation":"TODO: Some dummy description","development":true,"path":"End-to-end examples/Build model from database","code":""},{"title":"Avro Binding","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Avro/Binding","code":""},{"title":"Avro Externalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Avro/Externalize","code":""},{"title":"Avro Internalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Avro/Internalize","code":""},{"title":"CSV Binding","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Flat Data/CSV/Binding","code":""},{"title":"CSV Externalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Flat Data/CSV/Externalize","code":""},{"title":"CSV Internalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Flat Data/CSV/Internalize","code":""},{"title":"JSON Schema Binding","documentation":"TODO: Some dummy description","development":true,"path":"External Format/JSONSchema/Binding","code":""},{"title":"JSON Schema Externalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/JSONSchema/Externalize","code":""},{"title":"JSON Schema Internalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/JSONSchema/Internalize","code":""},{"title":"Protobuf Binding","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Protobuf/Binding","code":""},{"title":"Protobuf Externalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Protobuf/Externalize","code":""},{"title":"Protobuf Internalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/Protobuf/Internalize","code":""},{"title":"XML Binding","documentation":"TODO: Some dummy description","development":true,"path":"External Format/XML/Binding","code":""},{"title":"XML Externalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/XML/Externalize","code":""},{"title":"XML Internalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/XML/Internalize","code":""},{"title":"XStore Avro Binding","documentation":"TODO: Some dummy description","development":true,"path":"External Format/XStore Avro/Binding","code":""},{"title":"XStore Avro Externalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/XStore Avro/Externalize","code":""},{"title":"XStore Avro Internalize","documentation":"TODO: Some dummy description","development":true,"path":"External Format/XStore Avro/Internalize","code":""},{"title":"Big Query activator","documentation":"TODO: Some dummy description","development":true,"path":"Function/Activator - Big Query","code":""},{"title":"Hosted service activator","documentation":"TODO: Some dummy description","development":true,"path":"Function/Activator - Hosted service","code":""},{"title":"Activator - Service Jar","documentation":"Service execution Jar showcase.","path":"Function/Activator - Service Jar","code":"###Diagram\r\nDiagram diagram::all\r\n{\r\n  classView 0dee659c-6d6d-41d0-a326-dd0e63250732\r\n  {\r\n    class: domain::Firm;\r\n    position: (639.0,202.0);\r\n    rectangle: (134.32373046875,58.0);\r\n  }\r\n  classView 860aafab-2ae2-4714-8f4e-7d8924c6cec8\r\n  {\r\n    class: domain::Person;\r\n    position: (644.0,327.0);\r\n    rectangle: (124.521484375,58.0);\r\n  }\r\n  propertyView\r\n  {\r\n    property: domain::Person.firm;\r\n    source: 860aafab-2ae2-4714-8f4e-7d8924c6cec8;\r\n    target: 0dee659c-6d6d-41d0-a326-dd0e63250732;\r\n    points: [(706.2607421875,356.0),(706.161865234375,231.0)];\r\n  }\r\n  propertyView\r\n  {\r\n    property: domain::Firm.employees;\r\n    source: 0dee659c-6d6d-41d0-a326-dd0e63250732;\r\n    target: 860aafab-2ae2-4714-8f4e-7d8924c6cec8;\r\n    points: [(706.161865234375,231.0),(706.2607421875,356.0)];\r\n  }\r\n}\r\n\r\n\r\n###Relational\r\nDatabase database::h2\r\n(\r\n  Table PERSON\r\n  (\r\n    ID INTEGER PRIMARY KEY,\r\n    FIRMID INTEGER,\r\n    FIRST_NAME VARCHAR(200),\r\n    LAST_NAME VARCHAR(200)\r\n  )\r\n  Table FIRM\r\n  (\r\n    ID INTEGER PRIMARY KEY,\r\n    LEGAL_NAME VARCHAR(200)\r\n  )\r\n\r\n  Join Firm_Person(PERSON.FIRMID = FIRM.ID)\r\n)\r\n\r\n\r\n###Pure\r\nClass domain::Person\r\n{\r\n  firstName: String[1];\r\n  lastName: String[1];\r\n}\r\n\r\nClass domain::S_Person\r\n{\r\n  fullName: String[1];\r\n}\r\n\r\nClass domain::Firm\r\n{\r\n  legalName: String[1];\r\n}\r\n\r\nClass domain::S_Firm\r\n{\r\n  legalName: String[1];\r\n}\r\n\r\nAssociation domain::Firm_Person\r\n{\r\n  firm: domain::Firm[1];\r\n  employees: domain::Person[*];\r\n}\r\n\r\nAssociation domain::S_Firm_S_Person\r\n{\r\n  firm: domain::S_Firm[1];\r\n  employees: domain::S_Person[*];\r\n}\r\n\r\n\r\n###Mapping\r\nMapping mapping::m2m::Firm_Person\r\n(\r\n  domain::Person: Pure\r\n  {\r\n    ~src domain::S_Person\r\n    firstName: $src.fullName->substring(0, $src.fullName->indexOf(' ')),\r\n    lastName: $src.fullName->substring($src.fullName->indexOf(' ') + 1, $src.fullName->length())\r\n  }\r\n  domain::Firm: Pure\r\n  {\r\n    ~src domain::S_Firm\r\n    legalName: $src.legalName,\r\n    employees[domain_Person]: $src.employees\r\n  }\r\n\r\n  MappingTests\r\n  [\r\n    test_1\r\n    (\r\n      query: |domain::Firm.all()->graphFetch(#{domain::Firm{legalName,employees{firstName}}}#)->serialize(#{domain::Firm{legalName,employees{firstName}}}#);\r\n      data:\r\n      [\r\n        <Object, JSON, domain::S_Firm, '[{\"employees\":[{\"fullName\":\"Road Runner\"},{\"fullName\":\"Wile Coyote\"}],\"legalName\":\"ACME Corp.\"},{\"employees\":[{\"fullName\":\"Jake Sullivan\"},{\"fullName\":\"Mike Wazwoski\"}],\"legalName\":\"Monsters Inc.\"}]'>\r\n      ];\r\n      assert: '[{\"legalName\":\"ACME Corp.\",\"employees\":[{\"firstName\":\"Road\"},{\"firstName\":\"Wile\"}]},{\"legalName\":\"Monsters Inc.\",\"employees\":[{\"firstName\":\"Jake\"},{\"firstName\":\"Mike\"}]}]';\r\n    )\r\n  ]\r\n)\r\n\r\nMapping mapping::relational::Firm_Person\r\n(\r\n  domain::Person: Relational\r\n  {\r\n    ~primaryKey\r\n    (\r\n      [database::h2]PERSON.ID\r\n    )\r\n    ~mainTable [database::h2]PERSON\r\n    firstName: [database::h2]PERSON.FIRST_NAME,\r\n    lastName: [database::h2]PERSON.LAST_NAME\r\n  }\r\n  domain::Firm: Relational\r\n  {\r\n    ~primaryKey\r\n    (\r\n      [database::h2]FIRM.ID\r\n    )\r\n    ~mainTable [database::h2]FIRM\r\n    legalName: [database::h2]FIRM.LEGAL_NAME,\r\n    employees[domain_Person]: [database::h2]@Firm_Person\r\n  }\r\n\r\n  MappingTests\r\n  [\r\n    test_1\r\n    (\r\n      query: |domain::Firm.all()->project([x|$x.legalName, x|$x.employees.firstName, x|$x.employees.lastName], ['Legal Name', 'Employees/First Name', 'Employees/Last Name']);\r\n      data:\r\n      [\r\n        <Relational, SQL, database::h2, \r\n          'drop table if exists FIRM;\\n'+\r\n          'create table FIRM(ID INTEGER, LEGAL_NAME VARCHAR(200));\\n'+\r\n          'insert into FIRM(ID, LEGAL_NAME) values(100, \\'ACME Corp.\\');\\n'+\r\n          'insert into FIRM(ID, LEGAL_NAME) values(200, \\'Monsters Inc.\\');\\n'+\r\n          'drop table if exists PERSON;\\n'+\r\n          'create table PERSON(ID INTEGER, FIRMID INTEGER, FIRST_NAME VARCHAR(200), LAST_NAME VARCHAR(200));\\n'+\r\n          'insert into PERSON(ID, FIRMID, FIRST_NAME, LAST_NAME) values(1, 100, \\'Road\\', \\'Runner\\');\\n'+\r\n          'insert into PERSON(ID, FIRMID, FIRST_NAME, LAST_NAME) values(2, 100, \\'Wile\\', \\'Coyote\\');\\n'+\r\n          'insert into PERSON(ID, FIRMID, FIRST_NAME, LAST_NAME) values(3, 200, \\'Jake\\', \\'Sullivan\\');\\n'+\r\n          'insert into PERSON(ID, FIRMID, FIRST_NAME, LAST_NAME) values(4, 200, \\'Mike\\', \\'Wazwoski\\');\\n'\r\n        >\r\n      ];\r\n      assert: '[{\"values\":[\"ACME Corp.\",\"Road\",\"Runner\"]},{\"values\":[\"ACME Corp.\",\"Wile\",\"Coyote\"]},{\"values\":[\"Monsters Inc.\",\"Jake\",\"Sullivan\"]},{\"values\":[\"Monsters Inc.\",\"Mike\",\"Wazwoski\"]}]';\r\n    )\r\n  ]\r\n)\r\n\r\n\r\n###Connection\r\nRelationalDatabaseConnection connection::h2\r\n{\r\n  store: database::h2;\r\n  type: H2;\r\n  specification: LocalH2\r\n  {\r\n    testDataSetupSqls: [\r\n      'drop table if exists FIRM',\r\n      'create table FIRM(ID INTEGER, LEGAL_NAME VARCHAR(200))',\r\n      'insert into FIRM(ID, LEGAL_NAME) values(100, \\'ACME Corp.\\')',\r\n      'insert into FIRM(ID, LEGAL_NAME) values(200, \\'Monsters Inc.\\')',\r\n      'drop table if exists PERSON;',\r\n      'create table PERSON(ID INTEGER, FIRMID INTEGER, FIRST_NAME VARCHAR(200), LAST_NAME VARCHAR(200))',\r\n      'insert into PERSON(ID, FIRMID, FIRST_NAME, LAST_NAME) values(1, 100, \\'Road\\', \\'Runner\\')',\r\n      'insert into PERSON(ID, FIRMID, FIRST_NAME, LAST_NAME) values(2, 100, \\'Wile\\', \\'Coyote\\')',\r\n      'insert into PERSON(ID, FIRMID, FIRST_NAME, LAST_NAME) values(3, 200, \\'Jake\\', \\'Sullivan\\')',\r\n      'insert into PERSON(ID, FIRMID, FIRST_NAME, LAST_NAME) values(4, 200, \\'Mike\\', \\'Wazwoski\\')'\r\n      ];\r\n  };\r\n  auth: DefaultH2;\r\n}\r\n"},{"title":"Snowflake activator","documentation":"TODO: Some dummy description","development":true,"path":"Function/Activator - Snowflake","code":""},{"title":"Function","documentation":"TODO: Some dummy description","development":true,"path":"Function/Write Functions/Function","code":""},{"title":"Graph QL file generation","documentation":"TODO: Some dummy description","development":true,"path":"Generation/Generate files/GraphQL","code":""},{"title":"Jave file generation","documentation":"TODO: Some dummy description","development":true,"path":"Generation/Generate files/Java","code":""},{"title":"Python file generation","documentation":"TODO: Some dummy description","development":true,"path":"Generation/Generate files/Python","code":""},{"title":"Slang file generation","documentation":"TODO: Some dummy description","development":true,"path":"Generation/Generate files/Slang","code":""},{"title":"Mastery Model generation","documentation":"TODO: Some dummy description","development":true,"path":"Generation/Generate models/Mastery","code":""},{"title":"Build A Data model","documentation":"Learn how to build foundational data model elements: associations, classes, diagrams, enumerations, and properties.","development":true,"path":"Model/Build a data model","code":"###Diagram\nDiagram _02_advanced::FinalTradeAccountDiagram\n{\n  classView 2607efb4-489b-451c-9fe0-3ee0f71191db\n  {\n    class: _01_basic::Trade;\n    position: (1150.5257568359375,706.5);\n    rectangle: (207.88623046875,184.0);\n  }\n  classView 3f9f55f3-0f34-4aa5-972b-6fb0d0839393\n  {\n    class: _01_basic::TradeEvent;\n    position: (1528.4548415786112,750.0066923369803);\n    rectangle: (146.54296875,72.0);\n  }\n  classView dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d\n  {\n    class: _01_basic::Account;\n    position: (804.5257568359375,756.0);\n    rectangle: (179.53759765625,72.0);\n  }\n  classView 742b39b1-983a-4913-bad9-a45654973427\n  {\n    class: _02_advanced::AccountWithConstraints;\n    position: (789.9989051643056,921.25);\n    rectangle: (206.46875,58.0);\n  }\n  classView 931cb999-5873-4fcd-8e9b-0ca4f1cf9a3f\n  {\n    class: _02_advanced::SynonymStereoTyped;\n    position: (1170.9989051643056,579.625);\n    rectangle: (180.54736328125,86.0);\n  }\n  classView dfcaa3ce-a0e4-47ca-8a08-937129ab8c5e\n  {\n    class: _02_advanced::ProductUpdated;\n    position: (763.9989051643056,565.625);\n    rectangle: (224.7783203125,114.0);\n  }\n  classView 1e46b918-d9c4-4212-90b3-0b51992421dc\n  {\n    class: _01_basic::Trader;\n    position: (1536.7489051643056,594.1887199867499);\n    rectangle: (117.796875,58.0);\n  }\n  propertyView\n  {\n    property: _01_basic::Account.trades;\n    source: dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d;\n    target: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    points: [(977.9580688476562,781.5),(1204.9580688476562,782.5)];\n  }\n  propertyView\n  {\n    property: _01_basic::Trade.account;\n    source: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    target: dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d;\n    points: [(1156.9580688476562,819.5),(957.9580688476562,819.5)];\n  }\n  propertyView\n  {\n    property: _01_basic::Trade.events;\n    source: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    target: 3f9f55f3-0f34-4aa5-972b-6fb0d0839393;\n    points: [(1340.9989051643056,779.6887199867499),(1544.9989051643056,779.6887199867499)];\n  }\n  propertyView\n  {\n    property: _01_basic::TradeEvent.trade;\n    source: 3f9f55f3-0f34-4aa5-972b-6fb0d0839393;\n    target: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    points: [(1533.9989051643056,813.6887199867499),(1320.9989051643056,813.6887199867499)];\n  }\n  propertyView\n  {\n    property: _02_advanced::ProductUpdated.synonyms;\n    source: dfcaa3ce-a0e4-47ca-8a08-937129ab8c5e;\n    target: 931cb999-5873-4fcd-8e9b-0ca4f1cf9a3f;\n    points: [(876.3880653205556,622.625),(1261.2725868049306,622.625)];\n  }\n  propertyView\n  {\n    property: _02_advanced::SynonymStereoTyped.product;\n    source: 931cb999-5873-4fcd-8e9b-0ca4f1cf9a3f;\n    target: dfcaa3ce-a0e4-47ca-8a08-937129ab8c5e;\n    points: [(1261.2725868049306,622.625),(876.3880653205556,622.625)];\n  }\n  generalizationView\n  {\n    source: 742b39b1-983a-4913-bad9-a45654973427;\n    target: dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d;\n    points: [(893.2332801643056,950.25),(894.2945556640625,792.0)];\n  }\n}\n\nDiagram _01_basic::TradeAccountDiagram\n{\n  classView 7bac7403-9f7b-44e3-8396-de6093534159\n  {\n    class: _01_basic::Product;\n    position: (789.0,567.0);\n    rectangle: (237.00830078125,114.0);\n  }\n  classView 1e46b918-d9c4-4212-90b3-0b51992421dc\n  {\n    class: _01_basic::Trader;\n    position: (1528.7489051643056,576.1887199867499);\n    rectangle: (117.796875,58.0);\n  }\n  classView 0dd5c051-e28d-413a-a94e-567128bcdbc9\n  {\n    class: _01_basic::Synonym;\n    position: (1170.254150390625,579.5);\n    rectangle: (180.54736328125,72.0);\n  }\n  classView 2607efb4-489b-451c-9fe0-3ee0f71191db\n  {\n    class: _01_basic::Trade;\n    position: (1150.5257568359375,706.5);\n    rectangle: (207.88623046875,184.0);\n  }\n  classView 3f9f55f3-0f34-4aa5-972b-6fb0d0839393\n  {\n    class: _01_basic::TradeEvent;\n    position: (1528.4548415786112,750.0066923369803);\n    rectangle: (146.54296875,72.0);\n  }\n  classView dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d\n  {\n    class: _01_basic::Account;\n    position: (799.5257568359375,757.0);\n    rectangle: (179.53759765625,72.0);\n  }\n  propertyView\n  {\n    property: _01_basic::Account.trades;\n    source: dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d;\n    target: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    points: [(972.9580688476562,782.5),(1204.9580688476562,782.5)];\n  }\n  propertyView\n  {\n    property: _01_basic::Trade.account;\n    source: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    target: dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d;\n    points: [(1156.9580688476562,819.5),(952.9580688476562,820.5)];\n  }\n  propertyView\n  {\n    property: _01_basic::Trade.events;\n    source: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    target: 3f9f55f3-0f34-4aa5-972b-6fb0d0839393;\n    points: [(1340.9989051643056,779.6887199867499),(1544.9989051643056,779.6887199867499)];\n  }\n  propertyView\n  {\n    property: _01_basic::TradeEvent.trade;\n    source: 3f9f55f3-0f34-4aa5-972b-6fb0d0839393;\n    target: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    points: [(1533.9989051643056,813.6887199867499),(1320.9989051643056,813.6887199867499)];\n  }\n}\n\n\n###Text\nText _01_basic::README\n{\n  type: markdown;\n  content: '### Logical Modeling Showcase\\n\\nThis package contains showcase model to demonstrate logical modeling capabilities of Legend\\nIn this showcase, we will show the following:\\n1) How to create new Classes\\n2) How to define associations between related classes\\n3) How to define multiplicities for the fields in a Class\\n4) How to define enumerations\\n5) How to create a diagrams\\n6) How to create a doc like the one you are reading right now';\n}\n\nText _02_advanced::README\n{\n  type: markdown;\n  content: '###Advanced Modeling Concepts\\n\\nThis package builds upon the basic model developed in previous package and add more features to the model.\\nIn this showcase, we will show the following:\\n1. Class Inheritance\\n2. Derived Properties\\n3. Constraints\\n4. Stereotypes\\n5. Tags\\n\\n\\n';\n}\n\nText _03_modelToModelMapping::README\n{\n  type: markdown;\n  content: '###Model to Model Mapping\\n\\nThis package contains showcase models to demonstrate Model to model mapping which involves \\nthe transformation of data from source to the desired target model.\\nIn this showcase, we will cover the following:\\n1. Simple Model to model Mapping\\n2. Filtering within a mapping\\n3. Testing the m2m mapping \\n4. Union mappings';\n}\n\n\n###Pure\nEnum _01_basic::ProductSynonymType\n{\n  CUSIP,\n  ISIN,\n  SEDOL\n}\n\nClass _01_basic::Product\n{\n  name: String[1];\n  classification: _01_basic::ProductClassification[0..1];\n  cusip() {$this.synonyms->filter(s|$s.type == _01_basic::ProductSynonymType.CUSIP)->toOne().name}: String[1];\n  isin() {$this.synonyms->filter(s|$s.type == _01_basic::ProductSynonymType.ISIN)->toOne().name}: String[1];\n  sedol() {$this.synonyms->filter(s|$s.type == _01_basic::ProductSynonymType.SEDOL)->toOne().name}: String[1];\n}\n\nClass _01_basic::TradeEvent\n{\n  eventType: String[1];\n  eventDate: StrictDate[1];\n  initiator: _01_basic::Trader[0..1];\n  trade: _01_basic::Trade[1];\n}\n\nClass _03_modelToModelMapping::S_Product\n{\n  name: String[1];\n  classification: _03_modelToModelMapping::S_ProductClassification[0..1];\n  synonym: _03_modelToModelMapping::S_Synonym[*];\n}\n\nClass _01_basic::Trader\n{\n  name: String[1];\n  address: String[1];\n}\n\nClass _01_basic::Synonym\n{\n  type: _01_basic::ProductSynonymType[1];\n  name: String[1];\n}\n\nClass _01_basic::Trade\n{\n  id: Integer[1];\n  tradeDate: StrictDate[1];\n  quantity: Float[1];\n  settlementDateTime: DateTime[0..1];\n  product: _01_basic::Product[0..1];\n  account: _01_basic::Account[0..1];\n  events: _01_basic::TradeEvent[*];\n  productIdentifier() {if($this.product->isNotEmpty(), |$this.product->toOne().name, |'Unknown')}: String[1];\n  eventsByDate(date: Date[1]) {$this.events->filter(e|$e.eventDate == $date)}: _01_basic::TradeEvent[*];\n  tradeDateEvent() {$this.eventsByDate($this.tradeDate->toOne())->toOne()}: _01_basic::TradeEvent[1];\n  tradeDataEventType() {$this.tradeDateEvent.eventType}: String[1];\n  initiator() {$this.tradeDateEvent.initiator}: _01_basic::Trader[0..1];\n  latestEventDate() {$this.events->map(e|$e.eventDate)->sort()->reverse()->at(0)}: StrictDate[1];\n}\n\nClass _01_basic::Account\n{\n  name: String[1];\n  createDate: StrictDate[1];\n  trades: _01_basic::Trade[*];\n  closeDate: StrictDate[0..1];\n}\n\nClass <<meta::pure::profiles::temporal.businesstemporal>> _02_advanced::SynonymStereoTyped\n{\n  type: _01_basic::ProductSynonymType[1];\n  name: String[1];\n}\n\nClass _03_modelToModelMapping::S_Synonym\n{\n  type: String[1];\n  name: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'must pass date for isin/cusip/sedol now.'} _02_advanced::ProductUpdated\n{\n  name: String[1];\n  classification: _01_basic::ProductClassification[1];\n  cusip(businessDate: StrictDate[1]) {$this.synonyms($businessDate)->filter(s|$s.type == _01_basic::ProductSynonymType.CUSIP)->toOne().name}: String[1];\n  isin(businessDate: StrictDate[1]) {$this.synonyms($businessDate)->filter(s|$s.type == _01_basic::ProductSynonymType.ISIN)->toOne().name}: String[1];\n  sedol(businessDate: StrictDate[1]) {$this.synonyms($businessDate)->filter(s|$s.type == _01_basic::ProductSynonymType.SEDOL)->toOne().name}: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'use tags to add metadata.'} _02_advanced::AccountWithConstraints extends _01_basic::Account\n[\n  tradesNotDoubleBooked: $this->project([a|$a.trades.id], ['tradeId'])->groupBy('tradeId', 'count'->agg(x|$x, y|$y->count()))->filter(t|$t.getInteger('count') > 1)->tdsRows()->isEmpty(),\n  noTradesAfterCloseDate: true\n]\n{\n  isOpen() {$this.closeDate->isEmpty()}: Boolean[1];\n}\n\nClass _03_modelToModelMapping::S_ProductClassification\n{\n  type: String[1];\n  description: String[1];\n}\n\nClass _01_basic::ProductClassification\n{\n  type: String[1];\n  description: String[1];\n}\n\nAssociation _02_advanced::ProdSynonymMilestoned\n{\n  product: _02_advanced::ProductUpdated[1];\n  synonyms: _02_advanced::SynonymStereoTyped[*];\n}\n\nAssociation _01_basic::ProdSynonym\n{\n  product: _01_basic::Product[1];\n  synonyms: _01_basic::Synonym[*];\n}\n\n\n###Mapping\nMapping _03_modelToModelMapping::simpleModelToModelMapping\n(\n  *_01_basic::Product: Pure\n  {\n    ~src _03_modelToModelMapping::S_Product\n    ~filter !($src.classification.type == 'type2')\n    name: $src.name,\n    synonyms[_01_basic_Synonym]: $src.synonym,\n    classification[_01_basic_ProductClassification]: $src.classification\n  }\n  *_01_basic::ProductClassification: Pure\n  {\n    ~src _03_modelToModelMapping::S_ProductClassification\n    type: $src.type,\n    description: $src.description\n  }\n  *_01_basic::Synonym: Pure\n  {\n    ~src _03_modelToModelMapping::S_Synonym\n    name: $src.name,\n    type: EnumerationMapping _01_basic_ProductSynonymType: $src.type\n  }\n\n  _01_basic::ProductSynonymType: EnumerationMapping\n  {\n    CUSIP: ['C'],\n    ISIN: ['I'],\n    SEDOL: ['S']\n  }\n\n  MappingTests\n  [\n    test_1\n    (\n      query: |_01_basic::Product.all()->graphFetchChecked(#{_01_basic::Product{name,classification{description,type},synonyms{type,name}}}#)->serialize(#{_01_basic::Product{name,classification{description,type},synonyms{type,name}}}#);\n      data:\n      [\n        <Object, JSON, _03_modelToModelMapping::S_Product, '{\"name\":\"Product1\",\"classification\":{\"type\":\"type1\",\"description\":\"Product classification of type 1\"},\"synonym\":[{\"type\":\"C\",\"name\":\"C1\"}]}'>\n      ];\n      assert: '{\"defects\":[],\"source\":{\"defects\":[],\"source\":{\"number\":1,\"record\":\"{\\\"name\\\":\\\"Product1\\\",\\\"classification\\\":{\\\"type\\\":\\\"type1\\\",\\\"description\\\":\\\"Product classification of type 1\\\"},\\\"synonym\\\":[{\\\"type\\\":\\\"C\\\",\\\"name\\\":\\\"C1\\\"}]}\"},\"value\":{\"classification\":{\"description\":\"Product classification of type 1\",\"type\":\"type1\"},\"name\":\"Product1\",\"synonym\":[{\"name\":\"C1\",\"type\":\"C\"}]}},\"value\":{\"name\":\"Product1\",\"classification\":{\"description\":\"Product classification of type 1\",\"type\":\"type1\"},\"synonyms\":[{\"type\":\"CUSIP\",\"name\":\"C1\"}]}}';\n    ),\n    test_2\n    (\n      query: |_01_basic::Product.all()->graphFetchChecked(#{_01_basic::Product{name,classification{type,description},synonyms{name,type}}}#)->serialize(#{_01_basic::Product{name,classification{type,description},synonyms{name,type}}}#);\n      data:\n      [\n        <Object, JSON, _03_modelToModelMapping::S_Product, '{\"name\":\"Product2\",\"classification\":{\"type\":\"type2\",\"description\":\"Classification of type2\"},\"synonym\":[{\"type\":\"I\",\"name\":\"I1\"}]}'>\n      ];\n      assert: '[]';\n    )\n  ]\n)\n\nMapping _03_modelToModelMapping::unionMapping\n(\n  _01_basic::Product[p1]: Pure\n  {\n    ~src _03_modelToModelMapping::S_Product\n    ~filter !($src.classification.type == 'type2')\n    name: $src.name,\n    classification[_01_basic_ProductClassification]: $src.classification,\n    synonyms[_01_basic_Synonym]: $src.synonym\n  }\n  _01_basic::Product[p2]: Pure\n  {\n    ~src _03_modelToModelMapping::S_Product\n    ~filter $src.classification.type == 'type2'\n    name: $src.name,\n    classification[_01_basic_ProductClassification]: $src.classification,\n    synonyms[_01_basic_Synonym]: $src.synonym\n  }\n  *_01_basic::ProductClassification: Pure\n  {\n    ~src _03_modelToModelMapping::S_ProductClassification\n    type: $src.type,\n    description: $src.description\n  }\n  *_01_basic::Synonym: Pure\n  {\n    ~src _03_modelToModelMapping::S_Synonym\n    type: EnumerationMapping _01_basic_ProductSynonymType: $src.type,\n    name: $src.name\n  }\n  *_01_basic::Product[union]: Operation\n  {\n    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(p1,p2)\n  }\n\n  _01_basic::ProductSynonymType: EnumerationMapping\n  {\n    CUSIP: ['C'],\n    ISIN: ['I'],\n    SEDOL: ['S']\n  }\n\n  MappingTests\n  [\n    test_1\n    (\n      query: |_01_basic::Product.all()->graphFetchChecked(#{_01_basic::Product{name,synonyms{name,type},classification{type,description}}}#)->serialize(#{_01_basic::Product{name,synonyms{name,type},classification{type,description}}}#);\n      data:\n      [\n        <Object, JSON, _03_modelToModelMapping::S_Product, '{\"name\":\"Product1\",\"classification\":{\"type\":\"type1\",\"description\":\"Product of type1\"},\"synonym\":[{\"type\":\"C\",\"name\":\"C1\"},{\"type\":\"I\",\"name\":\"I1\"}]}'>\n      ];\n      assert: '{\"defects\":[],\"source\":{\"defects\":[],\"source\":{\"number\":1,\"record\":\"{\\\"name\\\":\\\"Product1\\\",\\\"classification\\\":{\\\"type\\\":\\\"type1\\\",\\\"description\\\":\\\"Product of type1\\\"},\\\"synonym\\\":[{\\\"type\\\":\\\"C\\\",\\\"name\\\":\\\"C1\\\"},{\\\"type\\\":\\\"I\\\",\\\"name\\\":\\\"I1\\\"}]}\"},\"value\":{\"classification\":{\"description\":\"Product of type1\",\"type\":\"type1\"},\"name\":\"Product1\",\"synonym\":[{\"name\":\"C1\",\"type\":\"C\"},{\"name\":\"I1\",\"type\":\"I\"}]}},\"value\":{\"name\":\"Product1\",\"synonyms\":[{\"name\":\"C1\",\"type\":\"CUSIP\"},{\"name\":\"I1\",\"type\":\"ISIN\"}],\"classification\":{\"type\":\"type1\",\"description\":\"Product of type1\"}}}';\n    ),\n    test_2\n    (\n      query: |_01_basic::Product.all()->graphFetchChecked(#{_01_basic::Product{name,classification{type,description},synonyms{name,type}}}#)->serialize(#{_01_basic::Product{name,classification{type,description},synonyms{name,type}}}#);\n      data:\n      [\n        <Object, JSON, _03_modelToModelMapping::S_Product, '{\"name\":\"Product2\",\"classification\":{\"type\":\"type2\",\"description\":\"Product of classification type2\"},\"synonym\":[{\"type\":\"S\",\"name\":\"S1\"}]}'>\n      ];\n      assert: '{\"defects\":[],\"source\":{\"defects\":[],\"source\":{\"number\":1,\"record\":\"{\\\"name\\\":\\\"Product2\\\",\\\"classification\\\":{\\\"type\\\":\\\"type2\\\",\\\"description\\\":\\\"Product of classification type2\\\"},\\\"synonym\\\":[{\\\"type\\\":\\\"S\\\",\\\"name\\\":\\\"S1\\\"}]}\"},\"value\":{\"classification\":{\"description\":\"Product of classification type2\",\"type\":\"type2\"},\"name\":\"Product2\",\"synonym\":[{\"name\":\"S1\",\"type\":\"S\"}]}},\"value\":{\"name\":\"Product2\",\"classification\":{\"type\":\"type2\",\"description\":\"Product of classification type2\"},\"synonyms\":[{\"name\":\"S1\",\"type\":\"SEDOL\"}]}}';\n    )\n  ]\n)\n"},{"title":"Data Space","documentation":"TODO: Some dummy description","development":true,"path":"Model/Document and share your model/Data Space","code":""},{"title":"Stereotypes","documentation":"TODO: Some dummy description","development":true,"path":"Model/Leverage profiles in your model/Stereotypes","code":""},{"title":"Super types","documentation":"TODO: Some dummy description","development":true,"path":"Model/Leverage profiles in your model/Super types","code":""},{"title":"Tagged values","documentation":"TODO: Some dummy description","development":true,"path":"Model/Leverage profiles in your model/Tagged values","code":""},{"title":"Markdown","documentation":"TODO: Some dummy description","development":true,"path":"Model/Use text elements/Text/Markdown","code":"\r\n"},{"title":"Mermaid","documentation":"TODO: Some dummy description","development":true,"path":"Model/Use text elements/Text/Mermaid","code":"\r\n"},{"title":"Service Store","documentation":"TODO: Some dummy description","development":true,"path":"Store/Elastic Store/Connection","code":""},{"title":"Elastic Store Mapping","documentation":"TODO: Some dummy description","development":true,"path":"Store/Elastic Store/Mapping","code":""},{"title":"Elastic Store","documentation":"TODO: Some dummy description","development":true,"path":"Store/Elastic Store/Store","code":""},{"title":"Model Store Connection","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Connection","code":""},{"title":"Association - Embedded","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/association/embedded","code":""},{"title":"Association - Inheritance","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/association/inheritance","code":""},{"title":"Association - ClassMappingByClass","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/classMappingByClass","code":""},{"title":"Association - ClassMappingFilterWithInnerJoin","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/classMappingFilterWithInnerJoin","code":""},{"title":"DataType","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/dataType","code":""},{"title":"Dates - datetime","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/dates/datetime","code":""},{"title":"Dates - strictdate","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/dates/strictdate","code":""},{"title":"Distinct","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/distinct","code":""},{"title":"Dynajoin","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/dynajoin","code":""},{"title":"Embedded - Advanced - Inline - Nested","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/embedded/inline/nested","code":""},{"title":"Embedded - Advanced - Inline - targetId","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/embedded/inline/targetId","code":""},{"title":"Enumeration","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/enumeration","code":""},{"title":"Extend - all","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/all","code":""},{"title":"Extend - distinct","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/distinct","code":""},{"title":"Extend - embeddedPropertyMapping","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/embeddedPropertyMapping","code":""},{"title":"Extend - filter","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/filter","code":""},{"title":"Extend - groupBy","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/groupBy","code":""},{"title":"Extent - inlineEmbeddedPropertyMapping","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/inlineEmbeddedPropertyMapping","code":""},{"title":"Extend - mainTable","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/mainTable","code":""},{"title":"Extend - model","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/model","code":""},{"title":"Extend - primaryKey","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/primaryKey","code":""},{"title":"Extend - propertyMapping","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/propertyMapping","code":""},{"title":"Extend - store","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/store","code":""},{"title":"Extend - storeSubstitution","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/storeSubstitution","code":""},{"title":"Extend - Union","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/extend/union","code":""},{"title":"Extend - Filter","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/filter","code":""},{"title":"GroupBy","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/groupBy","code":""},{"title":"In","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/in","code":""},{"title":"Include","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/include","code":""},{"title":"Inheritance - Cross","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/inheritance/cross","code":""},{"title":"Inheritance - Relational - multiJoins","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/inheritance/relational/multiJoins","code":""},{"title":"Inheritance - Relational - selfJoin","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/inheritance/relational/selfJoin","code":""},{"title":"Inheritance - Relational - union","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/inheritance/relational/union","code":""},{"title":"Innerjoin - Isolation","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/innerJoin/isolation","code":""},{"title":"Join","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/join","code":""},{"title":"Merge","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/merge","code":""},{"title":"Multigrain","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/multigrain","code":""},{"title":"Propertyfunc - simple","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/propertyfunc/simple","code":""},{"title":"Propertyfunc - withjoin","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/propertyfunc/withjoin","code":""},{"title":"SelfJoin","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/selfJoin","code":""},{"title":"Model To Model Service - Querying _Firm using json input","description":"Mapping of Firm to _Firm with tests and a service fetching _Firm output","documentation":"This project showcases a model to model mapping from `Firm` to `_Firm` outlining a mapping test and a service test for model to model.","path":"Store/Model Store/Mapping/service/basic","code":"###Data\nData data::IBMFirmData\n{\n  ExternalFormat\n  #{\n    contentType: 'application/json';\n    data: '{\\n  \"employees\": [\\n    {\\n      \"firstName\": \"John\",\\n      \"lastName\": \"Smith\"\\n    }\\n  ],\\n  \"legalName\": \"IBM\",\\n  \"type\": \"llc\"\\n}';\n  }#\n}\n\n\n###Service\nService mapping::FirmService\n{\n  pattern: '/83a0d72d-e69d-453e-8f23-8059767aeab7';\n  ownership: DID { identifier: '' };\n  documentation: '';\n  autoActivateUpdates: true;\n  execution: Single\n  {\n    query: |model::target::_Firm.all()->graphFetch(#{model::target::_Firm{myLegalName,name,employees{fullName}}}#)->serialize(#{model::target::_Firm{myLegalName,name,employees{fullName}}}#);\n    mapping: mapping::ModelToModelMapping;\n    runtime: mapping::FirmRuntime;\n  }\n  testSuites:\n  [\n    testSuite_1:\n    {\n      data:\n      [\n        connections:\n        [\n          connection_1:\n            ExternalFormat\n            #{\n              contentType: 'application/json';\n              data: '{\\n  \"employees\": [\\n    {\\n      \"firstName\": \"John\",\\n      \"lastName\": \"Smith\"\\n    }\\n  ],\\n  \"legalName\": \"IBM\",\\n  \"type\": \"llc\"\\n}';\n            }#\n        ]\n      ]\n      tests:\n      [\n        test_1:\n        {\n          serializationFormat: PURE;\n          asserts:\n          [\n            assertion_1:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"myLegalName()\": \"my name is: IBM\",\\n  \"name\": \"IBM\",\\n  \"employees\": [\\n    {\\n      \"fullName\": \"John Smith\"\\n    }\\n  ]\\n}';\n                  }#;\n              }#\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n###Pure\nEnum model::target::IncType\n{\n  LLC,\n  CORP\n}\n\nClass model::Person\n{\n  firstName: String[1];\n  lastName: String[1];\n}\n\nClass model::Firm\n{\n  employees: model::Person[1..*];\n  legalName: String[1];\n}\n\nClass model::target::_Firm\n{\n  employees: model::target::_Person[1..*];\n  name: String[1];\n  myLegalName() {'my name is: ' + $this.name}: String[1];\n}\n\nClass model::target::_Person\n{\n  fullName: String[1];\n}\n\n\n###Mapping\nMapping mapping::ModelToModelMapping\n(\n  *model::target::_Person: Pure\n  {\n    ~src model::Person\n    fullName: $src.firstName + ' ' + $src.lastName\n  }\n  *model::target::_Firm: Pure\n  {\n    ~src model::Firm\n    employees[model_target__Person]: $src.employees,\n    name: $src.legalName\n  }\n\n  model::target::IncType: EnumerationMapping\n  {\n    LLC: ['llc'],\n    CORP: ['corp']\n  }\n\n  testSuites:\n  [\n    FirmSuite:\n    {\n      function: |model::target::_Firm.all()->graphFetch(#{model::target::_Firm{employees{fullName},name,myLegalName}}#)->serialize(#{model::target::_Firm{employees{fullName},name,myLegalName}}#);\n      tests:\n      [\n        AppleData:\n        {\n          doc: 'This test will use Apple Data and assert  the transformation.';\n          data:\n          [\n            ModelStore:\n              ModelStore\n              #{\n                model::Firm:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"employees\": [\\n    {\\n      \"firstName\": \"firstEmployeeName\",\\n      \"lastName\": \"secondEmployeeName\"\\n    }\\n  ],\\n  \"legalName\": \"Apple Inc\"\\n}';\n                  }#\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"employees\" : [ {\\n    \"fullName\" : \"firstEmployeeName secondEmployeeName\"\\n  } ],\\n  \"name\" : \"Apple Inc\",\\n  \"myLegalName()\" : \"my name is: Apple Inc\"\\n}';\n                  }#;\n              }#\n          ];\n        },\n        GoogleData:\n        {\n          data:\n          [\n            ModelStore:\n              ModelStore\n              #{\n                model::Firm:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"employees\": [\\n    {\\n      \"firstName\": \"firstEmployeeName\",\\n      \"lastName\": \"secondEmployeeName\"\\n    }\\n  ],\\n  \"legalName\": \"Google\"\\n}';\n                  }#\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\r\\n  \"employees\" : [ {\\r\\n    \"fullName\" : \"firstEmployeeName secondEmployeeName\"\\r\\n  } ],\\r\\n  \"name\" : \"Google\",\\r\\n  \"myLegalName()\" : \"my name is: Google\"\\r\\n}';\n                  }#;\n              }#\n          ];\n        },\n        IBMData:\n        {\n          doc: '';\n          data:\n          [\n            ModelStore:\n              ModelStore\n              #{\n                model::Firm:\n                  Reference\n                  #{\n                    data::IBMFirmData\n                  }#\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\r\\n  \"employees\" : [ {\\r\\n    \"fullName\" : \"John Smith\"\\r\\n  } ],\\r\\n  \"name\" : \"IBM\",\\r\\n  \"myLegalName()\" : \"my name is: IBM\"\\r\\n}';\n                  }#;\n              }#\n          ];\n        },\n        ExpectedToFail:\n        {\n          doc: '';\n          data:\n          [\n            ModelStore:\n              ModelStore\n              #{\n                model::Firm:\n                  Reference\n                  #{\n                    data::IBMFirmData\n                  }#\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '{\\n  \"employees\" : [ {\\n    \"fullName\" : \"John Smith\"\\n  } ],\\n  \"name\" : \"IBMWhoops\",\\n  \"myLegalName()\" : \"my name is: IBM\"\\n}';\n                  }#;\n              }#\n          ];\n        }\n      ];\n    }\n  ]\n)\n\n\n###Connection\nJsonModelConnection mapping::FirmConnection\n{\n  class: model::Firm;\n  url: 'data:application/json,%7B%7D';\n}\n\n\n###Runtime\nRuntime mapping::FirmRuntime\n{\n  mappings:\n  [\n    mapping::ModelToModelMapping\n  ];\n  connections:\n  [\n    ModelStore:\n    [\n      connection_1: mapping::FirmConnection\n    ]\n  ];\n}\n"},{"title":"SqlFunction","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/sqlFunction","code":""},{"title":"Subtype","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/subtype","code":""},{"title":"Tree","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/tree","code":""},{"title":"Union - Extend","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/union/extend","code":""},{"title":"Union - MultipleChainedJoins","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/union/multipleChainedJoins","code":""},{"title":"Union - Optimized","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/union/optimized","code":""},{"title":"Union - Partial","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/union/partial","code":""},{"title":"Union - PartialForeignKeyUsage","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/union/partialForeignKeyUsage","code":""},{"title":"Union - SqlQueryMerging","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Mapping/union/sqlQueryMerging","code":""},{"title":"Model Store","documentation":"TODO: Some dummy description","development":true,"path":"Store/Model Store/Store","code":""},{"title":"Mongo Store Connection","documentation":"TODO: Some dummy description","development":true,"path":"Store/Mongo Store/Connection","code":""},{"title":"Mongo Store Mapping","documentation":"TODO: Some dummy description","development":true,"path":"Store/Mongo Store/Mapping","code":""},{"title":"Mongo Store","documentation":"TODO: Some dummy description","development":true,"path":"Store/Mongo Store/Store","code":""},{"title":"Service Store","documentation":"TODO: Some dummy description","development":true,"path":"Store/Mongo Store","code":""},{"title":"Relational Database Connection BigQuery with Default Credentials","description":"BigQuery connection using only default credentials. Does not include proxy.","documentation":"","path":"Store/Relational Store/Connection/BigQuery/DefaultCredentials","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: BigQuery;\n  specification: BigQuery\n  {\n    projectId: 'proj1';\n    defaultDataset: 'dataset1';\n  };\n  auth: GCPApplicationDefaultCredentials;\n}\n"},{"title":"Relational Database Connection BigQuery with Default Credentials and Proxy","description":"BigQuery connection using only default credentials. Does include proxy.","documentation":"","path":"Store/Relational Store/Connection/BigQuery/DefaultCredentialsWithProxy","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: BigQuery;\n  specification: BigQuery\n  {\n    projectId: 'proj1';\n    defaultDataset: 'dataset1';\n    proxyHost: 'proxyHost1';\n    proxyPort: 'proxyPort1';\n  };\n  auth: GCPApplicationDefaultCredentials;\n}\n"},{"title":"Relational Database Connection BigQuery with Identity Federation","description":"BigQuery connection using Identity Federation.","documentation":"","path":"Store/Relational Store/Connection/BigQuery/IdentityFederation","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: BigQuery;\n  specification: BigQuery\n  {\n    projectId: 'proj1';\n    defaultDataset: 'dataset1';\n  };\n  auth: GCPWorkloadIdentityFederation\n  {\n    serviceAccountEmail: 'name';\n  };\n}\n"},{"title":"Relational Database Connection BigQuery with Identity Federation additional scopes","description":"BigQuery connection using Identity Federation including additional scopes.","documentation":"","path":"Store/Relational Store/Connection/BigQuery/IdentityFederationWithScopes","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: BigQuery;\n  specification: BigQuery\n  {\n    projectId: 'proj1';\n    defaultDataset: 'dataset1';\n  };\n  auth: GCPWorkloadIdentityFederation\n  {\n    serviceAccountEmail: 'name';\n    additionalGcpScopes: [\n      'gcpScope',\n      'anotherGcpScope'\n      ];\n  };\n}\n"},{"title":"Relational Database Connection Databricks","description":"Examples of all valid Databricks connection specs","documentation":"","path":"Store/Relational Store/Connection/Databricks","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection\n{\n  store: store::Store;\n  type: Databricks;\n  specification: Databricks\n  {\n    hostname: 'databricks.com';\n    port: '443';\n    protocol: 'https';\n    httpPath: 'databricks/api/path';\n  };\n  auth: ApiToken\n  {\n    apiToken: 'databricks.api.token';\n  };\n}"},{"title":"Relational Database Connection MemSQL","description":"Examples of all valid MemSQL connection specs","documentation":"","path":"Store/Relational Store/Connection/MemSQL","code":""},{"title":"Relational Database Connection Postgres","description":"Examples of all valid Postgres connection specs","documentation":"","path":"Store/Relational Store/Connection/Postgres","code":""},{"title":"Relational Database Connection SQL Server","description":"Examples of all valid SQL Server connection specs","documentation":"","path":"Store/Relational Store/Connection/SQL Server","code":""},{"title":"Relational Database Connection Spanner","description":"Examples of all valid Spanner connection specs","documentation":"","path":"Store/Relational Store/Connection/Spanner","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::mySimpleConnection1\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n    proxyHost: 'localhost';\n    proxyPort: 9010;\n  };\n  auth: GCPApplicationDefaultCredentials;\n}\n\nRelationalDatabaseConnection connection::mySimpleConnection2\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n  };\n  auth: GCPApplicationDefaultCredentials;\n}\n\nRelationalDatabaseConnection connection::mySimpleConnection3\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n  };\n  auth: DelegatedKerberos;\n}\n\nRelationalDatabaseConnection connection::mySimpleConnection4\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n    proxyHost: 'localhost';\n    proxyPort: 9010;\n  };\n  auth: GCPWorkloadIdentityFederation\n  {\n    serviceAccountEmail: 'name';\n  };\n}\n\nRelationalDatabaseConnection connection::mySimpleConnection5\n{\n  store: store::Store;\n  type: Spanner;\n  specification: Spanner\n  {\n    projectId: 'spanner-emulator-test-1';\n    instanceId: 'test-instance-1';\n    databaseId: 'test-db';\n    proxyHost: 'localhost';\n    proxyPort: 9010;\n  };\n  auth: GCPWorkloadIdentityFederation\n  {\n    serviceAccountEmail: 'name';\n    additionalGcpScopes: [\n      'gcpScope',\n      'anotherGcpScope'\n      ];\n  };\n}"},{"title":"Relational Database Connection Trino","description":"Examples of all valid Trino connection specs","documentation":"","path":"Store/Relational Store/Connection/Trino","code":"###Relational\nDatabase store::Store\n(\n)\n\n\n###Connection\nRelationalDatabaseConnection connection::TrinoConnection\n{\n  store: store::Store;\n  type: Trino;\n  specification: Trino\n  {\n    host: 'host';\n    port: 1234;\n    catalog: 'tpch';\n    schema: 'tiny';\n    clientTags: 'cg::vega';\n    sslSpecification:\n    {\n      ssl: false;\n      trustStorePathVaultReference: 'abc12cde';\n      trustStorePasswordVaultReference: 'abc12cde';\n    };\n  };\n  auth: TrinoDelegatedKerberos\n  {\n    kerberosUseCanonicalHostname: false;\n    kerberosRemoteServiceName: 'HTTP';\n  };\n}"},{"title":"Basic Relational Database Specification","description":"Example of database specification with no explicit schema or joins","documentation":"","path":"Store/Relational Store/Database Specification/Basic","code":"###Relational\nDatabase store::SimpleDB\n(\n  // There is an implicit 'default' schema \n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n)\n"},{"title":"Relational Database Specification with Filter","description":"Example of database specification with Filter","documentation":"","path":"Store/Relational Store/Database Specification/Filter","code":"###Relational\nDatabase store::SimpleDB\n(\n  // There is an implicit 'default' schema \n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n\n  // Filters at the database level can be shared with several mappings\n  Filter largePersonIds(People.id > 100)\n)\n"},{"title":"Basic Relational Database Specification with Includes","description":"Example of database specification with other Database definitions included","documentation":"","path":"Store/Relational Store/Database Specification/Include","code":"###Relational\nDatabase store::SimpleDB\n(\n  include store::IncludedDB\n\n  // Definitions in included DB are available here\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n)\n\nDatabase store::IncludedDB\n(\n  Table PeoplePart2\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n)"},{"title":"Relational Database Specification with Milestoning","description":"Example of database specification with Milestoning","documentation":"","path":"Store/Relational Store/Database Specification/Join/Basic","code":"###Relational\nDatabase store::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n\n  Join PersonCompany(People.firm_id = Firms.id)\n  // Joins can also be defined across schemas\n)\n"},{"title":"Relational Database Specification with Join placeholder","description":"Example of database specification with join placeholder.","documentation":"TODO: explain what this feature is useful for.","path":"Store/Relational Store/Database Specification/Join/Self Join","code":"###Relational\nDatabase store::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    legal_name VARCHAR(200)\n  )\n\n  Join PersonCompany(People.id = {target}.firm_id)\n)\n"},{"title":"Relational Database Specification with Bitemporal Milestoning","description":"Example of database specification with Bitemporal Milestoning.","documentation":"","path":"Store/Relational Store/Database Specification/Milestoning/Bitemporal","code":"###Relational\nDatabase store::MilestonedDB\n(\n  Table BiTemporalProductTable\n  (\n    milestoning\n    (\n      processing(PROCESSING_IN = in_z, PROCESSING_OUT = out_z, INFINITY_DATE = %9999-12-31T00:00:00.0000),\n      business(BUS_FROM = from_z, BUS_THRU = thru_z, INFINITY_DATE = %9999-12-31T00:00:00.0000)\n    )\n\n    id INTEGER PRIMARY KEY,\n    type VARCHAR(200),\n    in_z DATE,\n    out_z DATE,\n    from_z DATE,\n    thru_z DATE\n  )\n)"},{"title":"Relational Database Specification with Business Milestoning","description":"Example of database specification with Business Milestoning.","documentation":"","path":"Store/Relational Store/Database Specification/Milestoning/Business","code":"###Relational\nDatabase store::MilestonedDB\n(\n  Table ProductTable\n  (\n    milestoning\n    (\n      // A subset of the following options can be used with the minimal being BUS_FROM and BUS_THRU\n      business(BUS_FROM = from_z, BUS_THRU = thru_z, THRU_IS_INCLUSIVE = true, INFINITY_DATE = %9999-12-31T00:00:00.0000)\n    )\n\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200) PRIMARY KEY,\n    type VARCHAR(200),\n    exchange VARCHAR(200),\n    classificationSystemId INTEGER,\n    referenceSystemName VARCHAR(200),\n    externalReferenceSystemName VARCHAR(200),\n    from_z DATE,\n    thru_z DATE\n  )\n  Table ProductTableWithBusinessSnapshotMilestoning\n  (\n    milestoning\n    (\n      business(BUS_SNAPSHOT_DATE = snapshotDate)\n    )\n\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    type VARCHAR(200),\n    snapshotDate DATE\n  )\n)\n"},{"title":"Relational Database Specification with Processing Milestoning","description":"Example of database specification with Temporal Milestoning.","documentation":"","path":"Store/Relational Store/Database Specification/Milestoning/Processing","code":"###Relational\nDatabase store::MilestonedDB\n(\n  Table BiTemporalProductTableWithProcessingMilestoning\n  (\n    milestoning\n    (\n      // The minimal set of options is PROCESSING_IN and PROCESSING_OUT\n      processing(PROCESSING_IN = in_z, PROCESSING_OUT = out_z, OUT_IS_INCLUSIVE = true, INFINITY_DATE = %9999-12-31T00:00:00.0000)\n    )\n\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    type VARCHAR(200),\n    in_z DATE,\n    out_z DATE\n  )\n)\n"},{"title":"Relational Database Specification with explicit Schema","description":"Example of database specification with explicit schema","documentation":"","path":"Store/Relational Store/Database Specification/Schema","code":"###Relational\nDatabase store::SimpleDB\n(\n  Schema SimpleSchema\n  (\n    Table People\n    (\n      id INTEGER PRIMARY KEY,\n      name VARCHAR(200),\n      firm_id INTEGER\n    )\n    Table Firms\n    (\n      id INTEGER PRIMARY KEY,\n      legal_name VARCHAR(200)\n    )\n  )\n  // Joins go outside the schema\n)\n"},{"title":"Relational Database Specification with Views","description":"Example of database specification with Views.","documentation":"Views are effectively transformations at the database level. They have the same syntax as Mappings but have a few different features.\nTODO: include a description on why views are required.","path":"Store/Relational Store/Database Specification/View","code":"###Relational\nDatabase store::SimpleDB\n(\n  Schema SimpleSchema\n  (\n    Table People\n    (\n      id INTEGER PRIMARY KEY,\n      name VARCHAR(200),\n      firm_id INTEGER\n    )\n    Table Firms\n    (\n      id INTEGER PRIMARY KEY,\n      legal_name VARCHAR(200)\n    )\n\n    View ImportantPeople\n    (\n      id: SimpleSchema.People.id PRIMARY KEY,\n      name: SimpleSchema.People.name\n    )\n  )\n)\n"},{"title":"Relational Database Distinct Mapping","description":"A simple example of a mapping containing a distinct operator.","documentation":"","path":"Store/Relational Store/Mapping/Distinct","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleDistinctMapping\n(\n  Person: Relational\n  {\n    ~distinct\n    name: [SimpleDB]People.name\n  }\n)\n\n\n###Pure\nClass models::Person\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(100)\n  )\n)\n"},{"title":"Relational Database Embedded Inline Mapping","description":"An example of an inline mapping.","documentation":"","path":"Store/Relational Store/Mapping/Embedded/Inline","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleInlineMapping\n(\n  Person[normalPerson]: Relational\n  {\n    name: [SimpleDB]People.name,\n    address() Inline[USAddress],\n    hobby\n    (\n      name: [SimpleDB]People.hobby_name\n    )\n  }\n  Address[USAddress]: Relational\n  {\n    ~mainTable [SimpleDB]Addresses\n    street_address: [SimpleDB]Addresses.street_address,\n    zip: [SimpleDB]US_Zips.zip_code\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n  address: Address[1];\n  hobby: Hobby[1];\n}\n\nClass models::Hobby\n{\n  name: String[1];\n}\n\nClass models::Address\n{\n  street_address: String[1];\n  zip: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    hobby_name VARCHAR(100)\n  )\n  Table Addresses\n  (\n    street_address VARCHAR(200)\n  )\n  Table US_Zips\n  (\n    zip_code CHAR(5)\n  )\n)\n"},{"title":"Relational Database Otherwise Mapping","description":"A simple example of a mapping containing the otherwise operator.","documentation":"","path":"Store/Relational Store/Mapping/Embedded/Otherwise","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleOtherwiseMapping\n(\n  Person: Relational\n  {\n    name: [SimpleDB]People.name,\n    pet\n    (\n      name: [SimpleDB]People.pet_name\n    ) Otherwise ([backupPetMapping]: [SimpleDB]@PetOwner)\n  }\n  Pet[backupPetMapping]: Relational\n  {\n    name: [SimpleDB]Pets.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n  pet: Pet[1];\n}\n\nClass models::Pet\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    pet_id INTEGER,\n    pet_name VARCHAR(50)\n  )\n  Table Pets\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n  )\n\n  Join PetOwner(People.pet_id = Pets.id)\n)\n"},{"title":"Relational Database Mapping with Inheritance","description":"A simple example of a mapping that demonstrates inheritance through the extends keyword.","documentation":"","path":"Store/Relational Store/Mapping/Extends","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleInheritanceMapping\n(\n  Person[basePerson]: Relational\n  {\n    name: [SimpleDB]People.name\n  }\n  PromotableWorker[promotableWorker] extends [basePerson]: Relational\n  {\n    available_promotion_titles: [SimpleDB]Promotions.title\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\nClass models::PromotableWorker\n{\n  available_promotion_titles: String[1..*];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n  Table Promotions\n  (\n    title VARCHAR(50)\n  )\n)\n"},{"title":"Relational Database Filter Mapping","description":"A simple example of a mapping that uses a filter.","documentation":"","path":"Store/Relational Store/Mapping/Filter","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleFilterMapping\n(\n  Person: Relational\n  {\n    ~filter [SimpleDB]longNameFilter\n    name: [SimpleDB]People.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n\n  Filter longNameFilter(length(People.name) >= 100)\n)\n"},{"title":"Relational Database GroupBy Mapping","description":"A simple example of a mapping using the groupBy operator.","documentation":"","path":"Store/Relational Store/Mapping/GroupBy","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleGroupByMapping\n(\n  Person: Relational\n  {\n    ~groupBy\n    (\n      [SimpleDB]People.firm_id\n    )\n    name: [SimpleDB]People.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n)\n"},{"title":"Relational Database Mapping with Includes","description":"An example of a Mapping with include statements.","documentation":"","path":"Store/Relational Store/Mapping/Include/Basic","code":"###Mapping\nimport models::*;\nimport stores::*;\nimport mappings::*;\nMapping mappings::IncludeMapping\n(\n  include mapping BaseMapping\n\n  Person: Relational\n  {\n    name: [SimpleDB]People.name\n  }\n)\n\nMapping mappings::BaseMapping\n(\n  Firm: Relational\n  {\n    name: [SimpleDB]Firms.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n\n  Join FirmPerson(People.firm_id = Firms.id)\n)\n"},{"title":"Relational Database Mapping with Store Substitution","description":"An example of a Mapping using store substitution across mappings.","documentation":"Store substitution changes the store used in the included mapping.","path":"Store/Relational Store/Mapping/Include/Store Substitution","code":"###Mapping\nimport models::*;\nimport stores::*;\nimport mappings::*;\nMapping mappings::IncludeSubstitutionMapping\n(\n  include mapping BaseMapping[SimpleDB->ComplexDB]\n\n  Person: Relational\n  {\n    name: [ComplexDB]People.name\n  }\n)\n\nMapping mappings::BaseMapping\n(\n  Firm: Relational\n  {\n    name: [SimpleDB]Firms.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n)\n\nDatabase stores::ComplexDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_sector VARCHAR(50)\n  )\n)"},{"title":"Relational Database Mapping with Joins","description":"A simple example of a mapping with a join.","documentation":"","path":"Store/Relational Store/Mapping/Joins/Basic","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mapping::SimpleJoinMapping\n(\n  Person: Relational\n  {\n    name: [SimpleDB]People.name,\n    firm: [SimpleDB]@FirmPerson,\n    pet_name: [SimpleDB]@PersonPet | [SimpleDB]Pets.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n  firm: Firm[1];\n  pet_name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\nClass models::Pet\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER,\n    pet_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n  Table Pets\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n  )\n\n  Join FirmPerson(People.firm_id = Firms.id)\n  Join PersonPet(People.pet_id = Pets.id)\n)\n"},{"title":"Relational Database Mapping with Chained Joins","description":"An example of a Mapping with Chained joins including setting join type.","documentation":"","path":"Store/Relational Store/Mapping/Joins/Chained","code":"###Mapping\nimport models::*;\nimport stores::*;\nMapping mappings::ChainedJoinMapping\n(\n  Person: Relational\n  {\n    name: [SimpleDB]People.name,\n    firm: [SimpleDB]@FirmPerson,\n    good_pet_name: [SimpleDB]@PersonPet > (INNER) [SimpleDB]@GoodPets | [SimpleDB]Pets.name\n  }\n)\n\n\n###Pure\nimport models::*;\nClass models::Person\n{\n  name: String[1];\n  firm: Firm[1];\n  good_pet_name: String[1];\n}\n\nClass models::Firm\n{\n  name: String[1];\n}\n\nClass models::Pet\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Table People\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200),\n    firm_id INTEGER,\n    pet_id INTEGER\n  )\n  Table Firms\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(200)\n  )\n  Table Pets\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n  )\n  Table GoodPets\n  (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n  )\n\n  Join FirmPerson(People.firm_id = Firms.id)\n  Join PersonPet(People.pet_id = Pets.id)\n  Join GoodPets(Pets.id = GoodPets.id)\n)\n"},{"title":"Relational Mapping with tests","documentation":"This package contains showcase model to demonstrate relational mapping capabilities of Legend\nIn this showcase, we will show the following:\n1) Relational store specifications  (schema, tables, column data types, quoting, join, self-join, filter)\n2) Relational mappings with tests\n3) Relational functions – dyna functions\n4) PURE function support","path":"Store/Relational Store/Mapping/Mapping Test","code":"###Diagram\nDiagram relationalMapping::TradeAccountDiagram\n{\n  classView 2607efb4-489b-451c-9fe0-3ee0f71191db\n  {\n    class: relationalMapping::Trade;\n    position: (1150.5257568359375,706.5);\n    rectangle: (207.88623046875,184.0);\n  }\n  classView 3f9f55f3-0f34-4aa5-972b-6fb0d0839393\n  {\n    class: relationalMapping::TradeEvent;\n    position: (1528.4548415786112,750.0066923369803);\n    rectangle: (146.54296875,72.0);\n  }\n  classView dfcaa3ce-a0e4-47ca-8a08-937129ab8c5e\n  {\n    class: relationalMapping::Product;\n    position: (763.9989051643056,565.625);\n    rectangle: (247.4994525821528,150.3125);\n  }\n  classView 1e46b918-d9c4-4212-90b3-0b51992421dc\n  {\n    class: relationalMapping::Trader;\n    position: (1536.7489051643056,594.1887199867499);\n    rectangle: (117.796875,58.0);\n  }\n  classView 931cb999-5873-4fcd-8e9b-0ca4f1cf9a3f\n  {\n    class: relationalMapping::Synonym;\n    position: (1170.9989051643056,579.625);\n    rectangle: (180.54736328125,100.0);\n  }\n  classView 742b39b1-983a-4913-bad9-a45654973427\n  {\n    class: relationalMapping::AccountWithConstraints;\n    position: (789.9989051643056,922.25);\n    rectangle: (206.46875,58.0);\n  }\n  classView dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d\n  {\n    class: relationalMapping::Account;\n    position: (804.5257568359375,756.0);\n    rectangle: (179.53759765625,72.0);\n  }\n  propertyView\n  {\n    property: relationalMapping::Account.trades;\n    source: dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d;\n    target: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    points: [(977.9580688476562,781.5),(1204.9580688476562,782.5)];\n  }\n  propertyView\n  {\n    property: relationalMapping::Trade.account;\n    source: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    target: dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d;\n    points: [(1156.9580688476562,819.5),(957.9580688476562,819.5)];\n  }\n  propertyView\n  {\n    property: relationalMapping::Trade.events;\n    source: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    target: 3f9f55f3-0f34-4aa5-972b-6fb0d0839393;\n    points: [(1340.9989051643056,779.6887199867499),(1544.9989051643056,779.6887199867499)];\n  }\n  propertyView\n  {\n    property: relationalMapping::TradeEvent.trade;\n    source: 3f9f55f3-0f34-4aa5-972b-6fb0d0839393;\n    target: 2607efb4-489b-451c-9fe0-3ee0f71191db;\n    points: [(1533.9989051643056,813.6887199867499),(1320.9989051643056,813.6887199867499)];\n  }\n  generalizationView\n  {\n    source: 742b39b1-983a-4913-bad9-a45654973427;\n    target: dbbcb7fc-5ca1-485d-a9e6-86bcb5813b9d;\n    points: [(893.2332801643056,951.25),(894.2945556640625,792.0)];\n  }\n}\n\n\n###Text\nText relationalMapping::README\n{\n  type: markdown;\n  content: '### Relational Mapping Showcase\\n\\nThis package contains showcase model to demonstrate relational mapping capabilities of Legend\\nIn this showcase, we will show the following:\\n1) Relational store specifications  (schema, tables, column data types, quoting, join, self-join, filter)\\n2) Relational mappings with tests\\n3) Relational functions \\u2013 dyna functions\\n4) PURE function support\\n';\n}\n\n\n###Relational\nDatabase relationalMapping::TradeAccountDb\n(\n  Schema productSchema\n  (\n    Table synonymTable\n    (\n      ID INTEGER PRIMARY KEY,\n      PROD_ID INTEGER,\n      TYPE VARCHAR(200),\n      NAME VARCHAR(200)\n    )\n    Table productTable\n    (\n      ID INTEGER PRIMARY KEY,\n      PROD_CLASSIFICATION_ID INTEGER,\n      NAME VARCHAR(200)\n    )\n    Table productClassificationTable\n    (\n      ID INTEGER PRIMARY KEY,\n      TYPE VARCHAR(200),\n      DESCRIPTION VARCHAR(200)\n    )\n  )\n\n  Table tradeTable\n  (\n    ID INTEGER PRIMARY KEY,\n    PROD_ID INTEGER,\n    ACCOUNT_ID INTEGER,\n    QUANTITY FLOAT,\n    TRADE_DATE DATE,\n    SETTLEMENT_DATETIME TIMESTAMP\n  )\n  Table accountTable\n  (\n    ID INTEGER PRIMARY KEY,\n    NAME VARCHAR(200),\n    \"CREATE DATE\" DATE,\n    \"CLOSE DATE\" DATE\n  )\n  Table tradeEventTable\n  (\n    ID INTEGER PRIMARY KEY,\n    TRADE_ID INTEGER,\n    EVENT_TYPE VARCHAR(10),\n    EVENT_DATE DATE,\n    TRADER_ID INTEGER\n  )\n  Table traderTable\n  (\n    ID INTEGER PRIMARY KEY,\n    NAME VARCHAR(200),\n    ADDRESS VARCHAR(200)\n  )\n\n  Join Product_Synonym(productSchema.synonymTable.PROD_ID = productSchema.productTable.ID)\n  Join Product_Classification(productSchema.productTable.PROD_CLASSIFICATION_ID = productSchema.productClassificationTable.ID)\n  Join TradeEvent_Trader(tradeEventTable.TRADER_ID = traderTable.ID)\n  Join TradeEvent_Trade(tradeEventTable.TRADE_ID = tradeTable.ID)\n  Join Trade_Account(tradeTable.ACCOUNT_ID = accountTable.ID)\n  Join Trade_Product(tradeTable.PROD_ID = productSchema.productTable.ID)\n\n  Filter AccountActiveFilter(accountTable.\"CLOSE DATE\" > now())\n  Filter TradeEventSettledFilter(tradeEventTable.EVENT_TYPE = 'Settle')\n)\n\n\n###Pure\nEnum relationalMapping::ProductSynonymType\n{\n  CUSIP,\n  ISIN,\n  SEDOL\n}\n\nClass relationalMapping::Trader\n{\n  name: String[1];\n  address: String[1];\n}\n\nClass relationalMapping::Synonym\n{\n  type: relationalMapping::ProductSynonymType[1];\n  name: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'use tags to add metadata.'} relationalMapping::AccountWithConstraints extends relationalMapping::Account\n[\n  tradesNotDoubleBooked: $this->project([a|$a.trades.id], ['tradeId'])->groupBy('tradeId', 'count'->agg(x|$x, y|$y->count()))->filter(t|$t.getInteger('count') > 1)->tdsRows()->isEmpty(),\n  noTradesAfterCloseDate: true\n]\n{\n  isOpen() {$this.closeDate->isEmpty()}: Boolean[1];\n}\n\nClass relationalMapping::TradeEvent\n{\n  eventType: String[1];\n  eventDate: StrictDate[1];\n  initiator: relationalMapping::Trader[0..1];\n  trade: relationalMapping::Trade[1];\n}\n\nClass relationalMapping::Account\n{\n  name: String[1];\n  createDate: StrictDate[1];\n  trades: relationalMapping::Trade[*];\n  closeDate: StrictDate[0..1];\n}\n\nClass relationalMapping::ProductClassification\n{\n  type: String[1];\n  description: String[1];\n}\n\nClass relationalMapping::Trade\n{\n  id: Integer[1];\n  tradeDate: StrictDate[1];\n  quantity: Float[1];\n  settlementDateTime: DateTime[0..1];\n  product: relationalMapping::Product[0..1];\n  account: relationalMapping::Account[0..1];\n  events: relationalMapping::TradeEvent[*];\n  productIdentifier() {if($this.product->isNotEmpty(), |$this.product->toOne().name, |'Unknown')}: String[1];\n  eventsByDate(date: Date[1]) {$this.events->filter(e|$e.eventDate == $date)}: relationalMapping::TradeEvent[*];\n  tradeDateEvent() {$this.eventsByDate($this.tradeDate->toOne())->toOne()}: relationalMapping::TradeEvent[1];\n  tradeDateEventType() {$this.tradeDateEvent.eventType}: String[1];\n  initiator() {$this.tradeDateEvent.initiator}: relationalMapping::Trader[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'must pass date for isin/cusip/sedol now.'} relationalMapping::Product\n{\n  name: String[1];\n  classification: relationalMapping::ProductClassification[1];\n  cusip() {$this.synonyms->filter(s|$s.type == relationalMapping::ProductSynonymType.CUSIP)->toOne().name}: String[1];\n  isin() {$this.synonyms->filter(s|$s.type == relationalMapping::ProductSynonymType.ISIN)->toOne().name}: String[1];\n  sedol() {$this.synonyms->filter(s|$s.type == relationalMapping::ProductSynonymType.SEDOL)->toOne().name}: String[1];\n}\n\nAssociation relationalMapping::ProdSynonym\n{\n  product: relationalMapping::Product[1];\n  synonyms: relationalMapping::Synonym[*];\n}\n\n\n###Mapping\nMapping relationalMapping::RelationalMappingWithFilters\n(\n  relationalMapping::Account: Relational\n  {\n    ~filter [relationalMapping::TradeAccountDb]AccountActiveFilter\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]accountTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]accountTable\n    name: [relationalMapping::TradeAccountDb]accountTable.NAME,\n    createDate: [relationalMapping::TradeAccountDb]accountTable.\"CREATE DATE\",\n    closeDate: [relationalMapping::TradeAccountDb]accountTable.\"CLOSE DATE\"\n  }\n  relationalMapping::TradeEvent: Relational\n  {\n    ~filter [relationalMapping::TradeAccountDb]TradeEventSettledFilter\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]tradeEventTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]tradeEventTable\n    eventType: [relationalMapping::TradeAccountDb]tradeEventTable.EVENT_TYPE,\n    eventDate: [relationalMapping::TradeAccountDb]tradeEventTable.EVENT_DATE\n  }\n\n  MappingTests\n  [\n    test_1\n    (\n      query: |relationalMapping::Account.all()->graphFetch(#{relationalMapping::Account{name,createDate,closeDate}}#)->serialize(#{relationalMapping::Account{name,createDate,closeDate}}#);\n      data:\n      [\n        <Relational, SQL, relationalMapping::TradeAccountDb, \n          'Drop table if exists accountTable;\\n'+\n          'Create Table accountTable(id INT, name VARCHAR(200), \"CREATE DATE\" DATE, \"CLOSE DATE\" DATE);\\n'+\n          'insert into accountTable (id, name, \"CREATE DATE\", \"CLOSE DATE\") values (1, \\'Acct 1\\', \\'2020-01-01\\', \\'2021-01-01\\');\\n'+\n          'insert into accountTable (id, name, \"CREATE DATE\", \"CLOSE DATE\") values (2, \\'Acct 2\\', \\'2020-01-01\\', \\'2025-01-01\\');\\n'+\n          'insert into accountTable (id, name, \"CREATE DATE\", \"CLOSE DATE\") values (2, \\'Acct 2\\', \\'2020-01-01\\', \\'2029-01-01\\');\\n'\n        >\n      ];\n      assert: '[{\"name\":\"Acct 2\",\"createDate\":\"2020-01-01\",\"closeDate\":\"2025-01-01\"},{\"name\":\"Acct 2\",\"createDate\":\"2020-01-01\",\"closeDate\":\"2029-01-01\"}]';\n    ),\n    test_2\n    (\n      query: |relationalMapping::TradeEvent.all()->graphFetch(#{relationalMapping::TradeEvent{eventDate,eventType}}#)->serialize(#{relationalMapping::TradeEvent{eventDate,eventType}}#);\n      data:\n      [\n        <Relational, SQL, relationalMapping::TradeAccountDb, \n          'Drop table if exists tradeEventTable;\\n'+\n          'Create Table tradeEventTable(id INT, trade_id INT, event_type VARCHAR(10), event_date DATE, trader_id INT);\\n'+\n          'insert into tradeEventTable(id, trade_id, event_type, event_date, trader_id) values (1, 1, \\'New\\', \\'2021-01-01\\', 1);\\n'+\n          'insert into tradeEventTable(id, trade_id, event_type, event_date, trader_id) values (2, 1, \\'Correct\\', \\'2021-01-02\\', 1);\\n'+\n          'insert into tradeEventTable(id, trade_id, event_type, event_date, trader_id) values (3, 1, \\'Settle\\', \\'2021-01-03\\', 1);\\n'\n        >\n      ];\n      assert: '{\"eventDate\":\"2021-01-03\",\"eventType\":\"Settle\"}';\n    )\n  ]\n)\n\nMapping relationalMapping::TradeAccountRelationalMapping\n(\n  *relationalMapping::ProductClassification: Relational\n  {\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]productSchema.productClassificationTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]productSchema.productClassificationTable\n    type: [relationalMapping::TradeAccountDb]productSchema.productClassificationTable.TYPE,\n    description: toUpper([relationalMapping::TradeAccountDb]productSchema.productClassificationTable.DESCRIPTION)\n  }\n  *relationalMapping::Synonym: Relational\n  {\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]productSchema.synonymTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]productSchema.synonymTable\n    name: [relationalMapping::TradeAccountDb]productSchema.synonymTable.NAME,\n    type: EnumerationMapping relationalMapping_ProductSynonymType: [relationalMapping::TradeAccountDb]productSchema.synonymTable.TYPE,\n    product[relationalMapping_Product]: [relationalMapping::TradeAccountDb]@Product_Synonym\n  }\n  *relationalMapping::Product: Relational\n  {\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]productSchema.productTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]productSchema.productTable\n    synonyms[relationalMapping_Synonym]: [relationalMapping::TradeAccountDb]@Product_Synonym,\n    name: [relationalMapping::TradeAccountDb]productSchema.productTable.NAME,\n    classification[relationalMapping_ProductClassification]: [relationalMapping::TradeAccountDb]@Product_Classification\n  }\n  *relationalMapping::Account: Relational\n  {\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]accountTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]accountTable\n    name: [relationalMapping::TradeAccountDb]accountTable.NAME,\n    createDate: [relationalMapping::TradeAccountDb]accountTable.\"CREATE DATE\",\n    closeDate: [relationalMapping::TradeAccountDb]accountTable.\"CLOSE DATE\"\n  }\n  *relationalMapping::Trader: Relational\n  {\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]traderTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]traderTable\n    name: [relationalMapping::TradeAccountDb]traderTable.NAME,\n    address: [relationalMapping::TradeAccountDb]traderTable.ADDRESS\n  }\n  *relationalMapping::TradeEvent: Relational\n  {\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]tradeEventTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]tradeEventTable\n    eventType: [relationalMapping::TradeAccountDb]tradeEventTable.EVENT_TYPE,\n    eventDate: [relationalMapping::TradeAccountDb]tradeEventTable.EVENT_DATE,\n    initiator[relationalMapping_Trader]: [relationalMapping::TradeAccountDb]@TradeEvent_Trader\n  }\n  *relationalMapping::Trade: Relational\n  {\n    ~primaryKey\n    (\n      [relationalMapping::TradeAccountDb]tradeTable.ID\n    )\n    ~mainTable [relationalMapping::TradeAccountDb]tradeTable\n    id: [relationalMapping::TradeAccountDb]tradeTable.ID,\n    tradeDate: [relationalMapping::TradeAccountDb]tradeTable.TRADE_DATE,\n    quantity: [relationalMapping::TradeAccountDb]tradeTable.QUANTITY,\n    settlementDateTime: [relationalMapping::TradeAccountDb]tradeTable.SETTLEMENT_DATETIME,\n    product[relationalMapping_Product]: [relationalMapping::TradeAccountDb]@Trade_Product,\n    account[relationalMapping_Account]: [relationalMapping::TradeAccountDb]@Trade_Account,\n    events[relationalMapping_TradeEvent]: [relationalMapping::TradeAccountDb]@TradeEvent_Trade\n  }\n\n  relationalMapping::ProductSynonymType: EnumerationMapping\n  {\n    CUSIP: ['CUSIP'],\n    ISIN: ['ISIN'],\n    SEDOL: ['SEDOL']\n  }\n\n  MappingTests\n  [\n    test_1\n    (\n      query: |relationalMapping::ProductClassification.all()->project([x|$x.description, x|$x.type->contains('Type A'), x|$x.type], ['Description', 'Is Type A', 'Type']);\n      data:\n      [\n        <Relational, SQL, relationalMapping::TradeAccountDb, \n          'Drop schema if exists productSchema cascade;\\n'+\n          'Create schema productSchema;\\n'+\n          'Drop table if exists productSchema.ProductClassificationTable;\\n'+\n          'Create Table productSchema.ProductClassificationTable(id INT, type VARCHAR(200), description VARCHAR(200));\\n'+\n          'insert into productSchema.ProductClassificationTable (id, type, description) values (1, \\'Type A\\', \\'Type A Product\\');\\n'+\n          'insert into productSchema.ProductClassificationTable (id, type, description) values (1, \\'Type B\\', \\'Type B Product\\');\\n'+\n          'insert into productSchema.ProductClassificationTable (id, type, description) values (1, \\'Type C\\', \\'Type C Product\\');\\n'\n        >\n      ];\n      assert: '[{\"values\":[\"TYPE A PRODUCT\",true,\"Type A\"]},{\"values\":[\"TYPE B PRODUCT\",false,\"Type B\"]},{\"values\":[\"TYPE C PRODUCT\",false,\"Type C\"]}]';\n    ),\n    test_2\n    (\n      query: |relationalMapping::Product.all()->filter(x|$x.classification.type == 'Type A')->project([x|$x.name, x|$x.classification.type, x|$x.classification.description, x|$x.synonyms.type, x|$x.synonyms.name], ['Name', 'Classification/Type', 'Classification/Description', 'Synonyms/Type', 'Synonyms/Name']);\n      data:\n      [\n        <Relational, SQL, relationalMapping::TradeAccountDb, \n          'Drop schema if exists productSchema cascade;\\n'+\n          'Create schema productSchema;\\n'+\n          'Drop table if exists productSchema.ProductClassificationTable;\\n'+\n          'Drop table if exists productSchema.productTable;\\n'+\n          'Drop table if exists productSchema.synonymTable;\\n'+\n          'Create Table productSchema.ProductClassificationTable(id INT, type VARCHAR(200), description VARCHAR(200));\\n'+\n          'Create Table productSchema.productTable(id INT, prod_classification_id VARCHAR(200), name VARCHAR(200));\\n'+\n          'Create Table productSchema.synonymTable(id INT, prod_id INT, type VARCHAR(200), name VARCHAR(200));\\n'+\n          'insert into productSchema.ProductClassificationTable (id, type, description) values (1, \\'Type A\\', \\'Type A Product\\');\\n'+\n          'insert into productSchema.ProductClassificationTable (id, type, description) values (2, \\'Type B\\', \\'Type B Product\\');\\n'+\n          'insert into productSchema.productTable (id, prod_classification_id, name) values (1, 1, \\'Product1\\');\\n'+\n          'insert into productSchema.productTable (id, prod_classification_id, name) values (2, 2, \\'Product2\\');\\n'+\n          'insert into productSchema.synonymTable (id, prod_id, type, name) values (1, 1, \\'CUSIP\\', \\'CUSIP1\\');\\n'+\n          'insert into productSchema.synonymTable (id, prod_id, type, name) values (2, 1, \\'ISIN\\', \\'ISIN1\\');\\n'+\n          'insert into productSchema.synonymTable (id, prod_id, type, name) values (3, 2, \\'CUSIP\\', \\'CUSIP2\\');\\n'+\n          'insert into productSchema.synonymTable (id, prod_id, type, name) values (4, 2, \\'SEDOL\\', \\'SEDOL2\\');\\n'\n        >\n      ];\n      assert: '[{\"values\":[\"Product1\",\"Type A\",\"TYPE A PRODUCT\",\"CUSIP\",\"CUSIP1\"]},{\"values\":[\"Product1\",\"Type A\",\"TYPE A PRODUCT\",\"ISIN\",\"ISIN1\"]}]';\n    ),\n    test_3\n    (\n      query: |relationalMapping::Account.all()->project([x|$x.name, x|$x.closeDate, x|$x.createDate, x|$x.createDate->monthNumber(), x|$x.createDate->dayOfMonth()], ['Name', 'Close Date', 'Create Date', 'Create Month Number', 'Create dayOfMonth']);\n      data:\n      [\n        <Relational, SQL, relationalMapping::TradeAccountDb, \n          'Drop table if exists accountTable;\\n'+\n          'Create Table accountTable(id INT, name VARCHAR(200), \"CREATE DATE\" DATE, \"CLOSE DATE\" DATE);\\n'+\n          'insert into accountTable (id, name, \"CREATE DATE\", \"CLOSE DATE\") values (1, \\'Acct 1\\', \\'2020-01-01\\', \\'2021-01-01\\');\\n'\n        >\n      ];\n      assert: '[{\"values\":[\"Acct 1\",\"2021-01-01\",\"2020-01-01\",1,1]}]';\n    ),\n    test_4\n    (\n      query: |relationalMapping::Trade.all()->project([x|$x.id, x|$x.quantity, x|$x.settlementDateTime, x|$x.tradeDate, x|$x.account.name, x|$x.product.name, x|$x.tradeDateEvent.eventDate, x|$x.tradeDateEventType, x|$x.initiator.name], ['Id', 'Quantity', 'Settlement Date Time', 'Trade Date', 'Account_Name', 'Product_Name', 'Trade Event Date', 'Trade Date Event Type', 'Initiator']);\n      data:\n      [\n        <Relational, SQL, relationalMapping::TradeAccountDb, \n          'Drop schema if exists productSchema cascade;\\n'+\n          'Create schema productSchema;\\n'+\n          'Drop table if exists productSchema.ProductClassificationTable;\\n'+\n          'Drop table if exists productSchema.productTable;\\n'+\n          'Drop table if exists productSchema.synonymTable;\\n'+\n          'Drop table if exists accountTable;\\n'+\n          'Drop table if exists traderTable;\\n'+\n          'Drop table if exists tradeTable;\\n'+\n          'Drop table if exists tradeEventTable;\\n'+\n          'Create Table productSchema.ProductClassificationTable(id INT, type VARCHAR(200), description VARCHAR(200));\\n'+\n          'Create Table productSchema.productTable(id INT, prod_classification_id VARCHAR(200), name VARCHAR(200));\\n'+\n          'Create Table productSchema.synonymTable(id INT, prod_id INT, type VARCHAR(200), name VARCHAR(200));\\n'+\n          'Create Table accountTable(id INT, name VARCHAR(200), \"CREATE DATE\" DATE, \"CLOSE DATE\" DATE);\\n'+\n          'Create Table traderTable(id INT, name VARCHAR(200), address VARCHAR(200));\\n'+\n          'Create Table tradeTable(id INT, prod_id INT, account_id INT, quantity FLOAT, trade_date DATE, settlement_datetime TIMESTAMP);\\n'+\n          'Create Table tradeEventTable(id INT, trade_id INT, event_type VARCHAR(10), event_date DATE, trader_id INT);\\n'+\n          'insert into productSchema.ProductClassificationTable (id, type, description) values (1, \\'Type A\\', \\'Type A Product\\');\\n'+\n          'insert into productSchema.ProductClassificationTable (id, type, description) values (2, \\'Type B\\', \\'Type B Product\\');\\n'+\n          'insert into productSchema.productTable (id, prod_classification_id, name) values (1, 1, \\'Product1\\');\\n'+\n          'insert into productSchema.productTable (id, prod_classification_id, name) values (2, 2, \\'Product2\\');\\n'+\n          'insert into productSchema.synonymTable (id, prod_id, type, name) values (1, 1, \\'CUSIP\\', \\'CUSIP1\\');\\n'+\n          'insert into productSchema.synonymTable (id, prod_id, type, name) values (2, 1, \\'ISIN\\', \\'ISIN1\\');\\n'+\n          'insert into productSchema.synonymTable (id, prod_id, type, name) values (3, 2, \\'CUSIP\\', \\'CUSIP2\\');\\n'+\n          'insert into productSchema.synonymTable (id, prod_id, type, name) values (4, 2, \\'SEDOL\\', \\'SEDOL2\\');\\n'+\n          'insert into accountTable (id, name, \"CREATE DATE\", \"CLOSE DATE\") values (1, \\'Acct 1\\', \\'2020-01-01\\', \\'2021-01-01\\');\\n'+\n          'insert into traderTable(id, name, address) values (1, \\'Jack\\', \\'Orchard\\');\\n'+\n          'insert into traderTable(id, name, address) values (2, \\'Cathy\\', \\'Marina Bay\\');\\n'+\n          'insert into tradeTable(id, prod_id, account_id, quantity, trade_date, settlement_datetime) values (1, 1, 1, 100, \\'2021-01-01\\', \\'2021-01-01 12:00:00\\');\\n'+\n          'insert into tradeEventTable(id, trade_id, event_type, event_date, trader_id) values (1, 1, \\'New\\', \\'2021-01-01\\', 1);\\n'+\n          'insert into tradeEventTable(id, trade_id, event_type, event_date, trader_id) values (2, 1, \\'Correct\\', \\'2021-01-02\\', 1);\\n'+\n          'insert into tradeEventTable(id, trade_id, event_type, event_date, trader_id) values (3, 1, \\'Settle\\', \\'2021-01-03\\', 1);\\n'\n        >\n      ];\n      assert: '[{\"values\":[1,100.0,\"2021-01-01T12:00:00.000000000+0000\",\"2021-01-01\",\"Acct 1\",\"Product1\",\"2021-01-01\",\"New\",\"Jack\"]}]';\n    )\n  ]\n)\n"},{"title":"Relational Database Mapping with Scoped Block","description":"An example of a Mapping using a scoped block for readability.","documentation":"","path":"Store/Relational Store/Mapping/Scope","code":"###Mapping\nimport stores::*;\nimport models::*;\nMapping mappings::SimpleScopedMapping\n(\n  Person: Relational\n  {\n    // scope([SimpleDB]SimpleSchema.People) can be used to extract the prefix\n    // it is just syntactic sugar and will be string replaced.\n    name: [SimpleDB]SimpleSchema.People.name\n  }\n)\n\n\n###Pure\nClass models::Person\n{\n  name: String[1];\n}\n\n\n###Relational\nDatabase stores::SimpleDB\n(\n  Schema SimpleSchema\n  (\n    Table People\n    (\n      id INTEGER PRIMARY KEY,\n      name VARCHAR(200)\n    )\n  )\n)"},{"title":"Relational Service - Querying Product Northwind Data","description":"Example of Relational Service querying northwind test data with Mapping and Service Tests","documentation":"The connection uses here loads sample data from northwind. See https://github.com/pthom/northwind_psql for more info as well as the model. It includes a sample service querying products. Additionally it includes services and mapping tests.","path":"Store/Relational Store/Service/Basic","code":"###Service\nService service::SimpleProductService\n{\n  pattern: '/ed49e48b-1536-4d04-9b6f-ad3a8ed6daf9';\n  ownership: DID { identifier: '' };\n  documentation: '';\n  autoActivateUpdates: true;\n  execution: Single\n  {\n    query: |store::NORTHWIND::Products.all()->project([x|$x.categoryId, x|$x.discontinued, x|$x.productId, x|$x.productName, x|$x.quantityPerUnit, x|$x.reorderLevel, x|$x.supplierId, x|$x.unitPrice, x|$x.unitsInStock, x|$x.unitsOnOrder], ['Category Id', 'Discontinued', 'Product Id', 'Product Name', 'Quantity Per Unit', 'Reorder Level', 'Supplier Id', 'Unit Price', 'Units In Stock', 'Units On Order']);\n    mapping: store::MyDatabaseMapping;\n    runtime: model::NorthWindRuntime;\n  }\n  testSuites:\n  [\n    testSuite_1:\n    {\n      data:\n      [\n        connections:\n        [\n          connection_1:\n            Relational\n            #{\n              NORTHWIND.PRODUCTS:\n                'PRODUCT_ID,PRODUCT_NAME,SUPPLIER_ID,CATEGORY_ID,QUANTITY_PER_UNIT,UNITS_IN_STOCK,UNITS_ON_ORDER,REORDER_LEVEL,DISCONTINUED\\n'+\n                '1,MyProduct,1,2,20,2,4,10,0\\n';\n            }#\n        ]\n      ]\n      tests:\n      [\n        test_1:\n        {\n          serializationFormat: PURE_TDSOBJECT;\n          asserts:\n          [\n            assertion_1:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '[\\n  {\\n    \"Category Id\": 2,\\n    \"Discontinued\": 0,\\n    \"Product Id\": 1,\\n    \"Product Name\": \"MyProduct\",\\n    \"Quantity Per Unit\": \"20\",\\n    \"Reorder Level\": 10,\\n    \"Supplier Id\": 1,\\n    \"Unit Price\": null,\\n    \"Units In Stock\": 2,\\n    \"Units On Order\": 4\\n  }\\n]';\n                  }#;\n              }#\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n###Relational\nDatabase store::MyDatabase\n(\n  Schema NORTHWIND\n  (\n    Table CATEGORIES\n    (\n      CATEGORY_ID SMALLINT PRIMARY KEY,\n      CATEGORY_NAME VARCHAR(15) NOT NULL,\n      DESCRIPTION VARCHAR(256),\n      PICTURE OTHER\n    )\n    Table CUSTOMERS\n    (\n      CUSTOMER_ID VARCHAR(5) PRIMARY KEY,\n      COMPANY_NAME VARCHAR(40) NOT NULL,\n      CONTACT_NAME VARCHAR(30),\n      CONTACT_TITLE VARCHAR(30),\n      ADDRESS VARCHAR(60),\n      CITY VARCHAR(15),\n      REGION VARCHAR(15),\n      POSTAL_CODE VARCHAR(10),\n      COUNTRY VARCHAR(15),\n      PHONE VARCHAR(24),\n      FAX VARCHAR(24)\n    )\n    Table CUSTOMER_CUSTOMER_DEMO\n    (\n      CUSTOMER_ID VARCHAR(5) PRIMARY KEY,\n      CUSTOMER_TYPE_ID VARCHAR(5) PRIMARY KEY\n    )\n    Table CUSTOMER_DEMOGRAPHICS\n    (\n      CUSTOMER_TYPE_ID VARCHAR(5) PRIMARY KEY,\n      CUSTOMER_DESC VARCHAR(256)\n    )\n    Table EMPLOYEES\n    (\n      EMPLOYEE_ID SMALLINT PRIMARY KEY,\n      LAST_NAME VARCHAR(20) NOT NULL,\n      FIRST_NAME VARCHAR(10) NOT NULL,\n      TITLE VARCHAR(30),\n      TITLE_OF_COURTESY VARCHAR(25),\n      BIRTH_DATE DATE,\n      HIRE_DATE DATE,\n      ADDRESS VARCHAR(60),\n      CITY VARCHAR(15),\n      REGION VARCHAR(15),\n      POSTAL_CODE VARCHAR(10),\n      COUNTRY VARCHAR(15),\n      HOME_PHONE VARCHAR(24),\n      EXTENSION VARCHAR(4),\n      PHOTO OTHER,\n      NOTES OTHER,\n      REPORTS_TO SMALLINT,\n      PHOTO_PATH VARCHAR(255)\n    )\n    Table EMPLOYEE_TERRITORIES\n    (\n      EMPLOYEE_ID SMALLINT PRIMARY KEY,\n      TERRITORY_ID VARCHAR(20) PRIMARY KEY\n    )\n    Table ORDERS\n    (\n      ORDER_ID SMALLINT PRIMARY KEY,\n      CUSTOMER_ID VARCHAR(5),\n      EMPLOYEE_ID SMALLINT,\n      ORDER_DATE DATE,\n      REQUIRED_DATE DATE,\n      SHIPPED_DATE DATE,\n      SHIP_VIA SMALLINT,\n      FREIGHT OTHER,\n      SHIP_NAME VARCHAR(40),\n      SHIP_ADDRESS VARCHAR(60),\n      SHIP_CITY VARCHAR(15),\n      SHIP_REGION VARCHAR(15),\n      SHIP_POSTAL_CODE VARCHAR(10),\n      SHIP_COUNTRY VARCHAR(15)\n    )\n    Table ORDER_DETAILS\n    (\n      ORDER_ID SMALLINT PRIMARY KEY,\n      PRODUCT_ID SMALLINT PRIMARY KEY,\n      UNIT_PRICE OTHER NOT NULL,\n      QUANTITY SMALLINT NOT NULL,\n      DISCOUNT OTHER NOT NULL\n    )\n    Table PRODUCTS\n    (\n      PRODUCT_ID SMALLINT PRIMARY KEY,\n      PRODUCT_NAME VARCHAR(40) NOT NULL,\n      SUPPLIER_ID SMALLINT,\n      CATEGORY_ID SMALLINT,\n      QUANTITY_PER_UNIT VARCHAR(20),\n      UNIT_PRICE OTHER,\n      UNITS_IN_STOCK SMALLINT,\n      UNITS_ON_ORDER SMALLINT,\n      REORDER_LEVEL SMALLINT,\n      DISCONTINUED INTEGER NOT NULL\n    )\n    Table REGION\n    (\n      REGION_ID SMALLINT PRIMARY KEY,\n      REGION_DESCRIPTION VARCHAR(60) NOT NULL\n    )\n    Table SHIPPERS\n    (\n      SHIPPER_ID SMALLINT PRIMARY KEY,\n      COMPANY_NAME VARCHAR(40) NOT NULL,\n      PHONE VARCHAR(24)\n    )\n    Table SUPPLIERS\n    (\n      SUPPLIER_ID SMALLINT PRIMARY KEY,\n      COMPANY_NAME VARCHAR(40) NOT NULL,\n      CONTACT_NAME VARCHAR(30),\n      CONTACT_TITLE VARCHAR(30),\n      ADDRESS VARCHAR(60),\n      CITY VARCHAR(15),\n      REGION VARCHAR(15),\n      POSTAL_CODE VARCHAR(10),\n      COUNTRY VARCHAR(15),\n      PHONE VARCHAR(24),\n      FAX VARCHAR(24),\n      HOMEPAGE VARCHAR(256)\n    )\n    Table TERRITORIES\n    (\n      TERRITORY_ID VARCHAR(20) PRIMARY KEY,\n      TERRITORY_DESCRIPTION VARCHAR(60) NOT NULL,\n      REGION_ID SMALLINT NOT NULL\n    )\n    Table US_STATES\n    (\n      STATE_ID SMALLINT PRIMARY KEY,\n      STATE_NAME VARCHAR(100),\n      STATE_ABBR VARCHAR(2),\n      STATE_REGION VARCHAR(50)\n    )\n  )\n)\n\n\n###Pure\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::OrderDetails\n{\n  orderId: Integer[1];\n  productId: Integer[1];\n  unitPrice: String[1];\n  quantity: Integer[1];\n  discount: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::CustomerDemographics\n{\n  customerTypeId: String[1];\n  customerDesc: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Shippers\n{\n  shipperId: Integer[1];\n  companyName: String[1];\n  phone: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::CustomerCustomerDemo\n{\n  customerId: String[1];\n  customerTypeId: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Employees\n{\n  employeeId: Integer[1];\n  lastName: String[1];\n  firstName: String[1];\n  title: String[0..1];\n  titleOfCourtesy: String[0..1];\n  birthDate: StrictDate[0..1];\n  hireDate: StrictDate[0..1];\n  address: String[0..1];\n  city: String[0..1];\n  region: String[0..1];\n  postalCode: String[0..1];\n  country: String[0..1];\n  homePhone: String[0..1];\n  extension: String[0..1];\n  photo: String[0..1];\n  notes: String[0..1];\n  reportsTo: Integer[0..1];\n  photoPath: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Territories\n{\n  territoryId: String[1];\n  territoryDescription: String[1];\n  regionId: Integer[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Customers\n{\n  customerId: String[1];\n  companyName: String[1];\n  contactName: String[0..1];\n  contactTitle: String[0..1];\n  address: String[0..1];\n  city: String[0..1];\n  region: String[0..1];\n  postalCode: String[0..1];\n  country: String[0..1];\n  phone: String[0..1];\n  fax: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Region\n{\n  regionId: Integer[1];\n  regionDescription: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::EmployeeTerritories\n{\n  employeeId: Integer[1];\n  territoryId: String[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Products\n{\n  productId: Integer[1];\n  productName: String[1];\n  supplierId: Integer[0..1];\n  categoryId: Integer[0..1];\n  quantityPerUnit: String[0..1];\n  unitPrice: String[0..1];\n  unitsInStock: Integer[0..1];\n  unitsOnOrder: Integer[0..1];\n  reorderLevel: Integer[0..1];\n  discontinued: Integer[1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Categories\n{\n  categoryId: Integer[1];\n  categoryName: String[1];\n  description: String[0..1];\n  picture: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::UsStates\n{\n  stateId: Integer[1];\n  stateName: String[0..1];\n  stateAbbr: String[0..1];\n  stateRegion: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Orders\n{\n  orderId: Integer[1];\n  customerId: String[0..1];\n  employeeId: Integer[0..1];\n  orderDate: StrictDate[0..1];\n  requiredDate: StrictDate[0..1];\n  shippedDate: StrictDate[0..1];\n  shipVia: Integer[0..1];\n  freight: String[0..1];\n  shipName: String[0..1];\n  shipAddress: String[0..1];\n  shipCity: String[0..1];\n  shipRegion: String[0..1];\n  shipPostalCode: String[0..1];\n  shipCountry: String[0..1];\n}\n\nClass {meta::pure::profiles::doc.doc = 'Generated Element'} store::NORTHWIND::Suppliers\n{\n  supplierId: Integer[1];\n  companyName: String[1];\n  contactName: String[0..1];\n  contactTitle: String[0..1];\n  address: String[0..1];\n  city: String[0..1];\n  region: String[0..1];\n  postalCode: String[0..1];\n  country: String[0..1];\n  phone: String[0..1];\n  fax: String[0..1];\n  homepage: String[0..1];\n}\n\n\n###Mapping\nMapping store::MyDatabaseMapping\n(\n  *store::NORTHWIND::Categories[store_NORTHWIND_Categories]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.CATEGORIES.CATEGORY_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.CATEGORIES\n    categoryId: [store::MyDatabase]NORTHWIND.CATEGORIES.CATEGORY_ID,\n    categoryName: [store::MyDatabase]NORTHWIND.CATEGORIES.CATEGORY_NAME,\n    description: [store::MyDatabase]NORTHWIND.CATEGORIES.DESCRIPTION,\n    picture: [store::MyDatabase]NORTHWIND.CATEGORIES.PICTURE\n  }\n  *store::NORTHWIND::Customers[store_NORTHWIND_Customers]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.CUSTOMERS.CUSTOMER_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.CUSTOMERS\n    customerId: [store::MyDatabase]NORTHWIND.CUSTOMERS.CUSTOMER_ID,\n    companyName: [store::MyDatabase]NORTHWIND.CUSTOMERS.COMPANY_NAME,\n    contactName: [store::MyDatabase]NORTHWIND.CUSTOMERS.CONTACT_NAME,\n    contactTitle: [store::MyDatabase]NORTHWIND.CUSTOMERS.CONTACT_TITLE,\n    address: [store::MyDatabase]NORTHWIND.CUSTOMERS.ADDRESS,\n    city: [store::MyDatabase]NORTHWIND.CUSTOMERS.CITY,\n    region: [store::MyDatabase]NORTHWIND.CUSTOMERS.REGION,\n    postalCode: [store::MyDatabase]NORTHWIND.CUSTOMERS.POSTAL_CODE,\n    country: [store::MyDatabase]NORTHWIND.CUSTOMERS.COUNTRY,\n    phone: [store::MyDatabase]NORTHWIND.CUSTOMERS.PHONE,\n    fax: [store::MyDatabase]NORTHWIND.CUSTOMERS.FAX\n  }\n  *store::NORTHWIND::CustomerCustomerDemo[store_NORTHWIND_CustomerCustomerDemo]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO.CUSTOMER_ID,\n      [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO.CUSTOMER_TYPE_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO\n    customerId: [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO.CUSTOMER_ID,\n    customerTypeId: [store::MyDatabase]NORTHWIND.CUSTOMER_CUSTOMER_DEMO.CUSTOMER_TYPE_ID\n  }\n  *store::NORTHWIND::CustomerDemographics[store_NORTHWIND_CustomerDemographics]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.CUSTOMER_DEMOGRAPHICS.CUSTOMER_TYPE_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.CUSTOMER_DEMOGRAPHICS\n    customerTypeId: [store::MyDatabase]NORTHWIND.CUSTOMER_DEMOGRAPHICS.CUSTOMER_TYPE_ID,\n    customerDesc: [store::MyDatabase]NORTHWIND.CUSTOMER_DEMOGRAPHICS.CUSTOMER_DESC\n  }\n  *store::NORTHWIND::Employees[store_NORTHWIND_Employees]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.EMPLOYEES.EMPLOYEE_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.EMPLOYEES\n    employeeId: [store::MyDatabase]NORTHWIND.EMPLOYEES.EMPLOYEE_ID,\n    lastName: [store::MyDatabase]NORTHWIND.EMPLOYEES.LAST_NAME,\n    firstName: [store::MyDatabase]NORTHWIND.EMPLOYEES.FIRST_NAME,\n    title: [store::MyDatabase]NORTHWIND.EMPLOYEES.TITLE,\n    titleOfCourtesy: [store::MyDatabase]NORTHWIND.EMPLOYEES.TITLE_OF_COURTESY,\n    birthDate: [store::MyDatabase]NORTHWIND.EMPLOYEES.BIRTH_DATE,\n    hireDate: [store::MyDatabase]NORTHWIND.EMPLOYEES.HIRE_DATE,\n    address: [store::MyDatabase]NORTHWIND.EMPLOYEES.ADDRESS,\n    city: [store::MyDatabase]NORTHWIND.EMPLOYEES.CITY,\n    region: [store::MyDatabase]NORTHWIND.EMPLOYEES.REGION,\n    postalCode: [store::MyDatabase]NORTHWIND.EMPLOYEES.POSTAL_CODE,\n    country: [store::MyDatabase]NORTHWIND.EMPLOYEES.COUNTRY,\n    homePhone: [store::MyDatabase]NORTHWIND.EMPLOYEES.HOME_PHONE,\n    extension: [store::MyDatabase]NORTHWIND.EMPLOYEES.EXTENSION,\n    photo: [store::MyDatabase]NORTHWIND.EMPLOYEES.PHOTO,\n    notes: [store::MyDatabase]NORTHWIND.EMPLOYEES.NOTES,\n    reportsTo: [store::MyDatabase]NORTHWIND.EMPLOYEES.REPORTS_TO,\n    photoPath: [store::MyDatabase]NORTHWIND.EMPLOYEES.PHOTO_PATH\n  }\n  *store::NORTHWIND::EmployeeTerritories[store_NORTHWIND_EmployeeTerritories]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES.EMPLOYEE_ID,\n      [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES.TERRITORY_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES\n    employeeId: [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES.EMPLOYEE_ID,\n    territoryId: [store::MyDatabase]NORTHWIND.EMPLOYEE_TERRITORIES.TERRITORY_ID\n  }\n  *store::NORTHWIND::Orders[store_NORTHWIND_Orders]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.ORDERS.ORDER_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.ORDERS\n    orderId: [store::MyDatabase]NORTHWIND.ORDERS.ORDER_ID,\n    customerId: [store::MyDatabase]NORTHWIND.ORDERS.CUSTOMER_ID,\n    employeeId: [store::MyDatabase]NORTHWIND.ORDERS.EMPLOYEE_ID,\n    orderDate: [store::MyDatabase]NORTHWIND.ORDERS.ORDER_DATE,\n    requiredDate: [store::MyDatabase]NORTHWIND.ORDERS.REQUIRED_DATE,\n    shippedDate: [store::MyDatabase]NORTHWIND.ORDERS.SHIPPED_DATE,\n    shipVia: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_VIA,\n    freight: [store::MyDatabase]NORTHWIND.ORDERS.FREIGHT,\n    shipName: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_NAME,\n    shipAddress: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_ADDRESS,\n    shipCity: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_CITY,\n    shipRegion: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_REGION,\n    shipPostalCode: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_POSTAL_CODE,\n    shipCountry: [store::MyDatabase]NORTHWIND.ORDERS.SHIP_COUNTRY\n  }\n  *store::NORTHWIND::OrderDetails[store_NORTHWIND_OrderDetails]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.ORDER_DETAILS.ORDER_ID,\n      [store::MyDatabase]NORTHWIND.ORDER_DETAILS.PRODUCT_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.ORDER_DETAILS\n    orderId: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.ORDER_ID,\n    productId: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.PRODUCT_ID,\n    unitPrice: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.UNIT_PRICE,\n    quantity: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.QUANTITY,\n    discount: [store::MyDatabase]NORTHWIND.ORDER_DETAILS.DISCOUNT\n  }\n  *store::NORTHWIND::Products[store_NORTHWIND_Products]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.PRODUCTS.PRODUCT_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.PRODUCTS\n    productId: [store::MyDatabase]NORTHWIND.PRODUCTS.PRODUCT_ID,\n    productName: [store::MyDatabase]NORTHWIND.PRODUCTS.PRODUCT_NAME,\n    supplierId: [store::MyDatabase]NORTHWIND.PRODUCTS.SUPPLIER_ID,\n    categoryId: [store::MyDatabase]NORTHWIND.PRODUCTS.CATEGORY_ID,\n    quantityPerUnit: [store::MyDatabase]NORTHWIND.PRODUCTS.QUANTITY_PER_UNIT,\n    unitPrice: [store::MyDatabase]NORTHWIND.PRODUCTS.UNIT_PRICE,\n    unitsInStock: [store::MyDatabase]NORTHWIND.PRODUCTS.UNITS_IN_STOCK,\n    unitsOnOrder: [store::MyDatabase]NORTHWIND.PRODUCTS.UNITS_ON_ORDER,\n    reorderLevel: [store::MyDatabase]NORTHWIND.PRODUCTS.REORDER_LEVEL,\n    discontinued: [store::MyDatabase]NORTHWIND.PRODUCTS.DISCONTINUED\n  }\n  *store::NORTHWIND::Region[store_NORTHWIND_Region]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.REGION.REGION_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.REGION\n    regionId: [store::MyDatabase]NORTHWIND.REGION.REGION_ID,\n    regionDescription: [store::MyDatabase]NORTHWIND.REGION.REGION_DESCRIPTION\n  }\n  *store::NORTHWIND::Shippers[store_NORTHWIND_Shippers]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.SHIPPERS.SHIPPER_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.SHIPPERS\n    shipperId: [store::MyDatabase]NORTHWIND.SHIPPERS.SHIPPER_ID,\n    companyName: [store::MyDatabase]NORTHWIND.SHIPPERS.COMPANY_NAME,\n    phone: [store::MyDatabase]NORTHWIND.SHIPPERS.PHONE\n  }\n  *store::NORTHWIND::Suppliers[store_NORTHWIND_Suppliers]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.SUPPLIERS.SUPPLIER_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.SUPPLIERS\n    supplierId: [store::MyDatabase]NORTHWIND.SUPPLIERS.SUPPLIER_ID,\n    companyName: [store::MyDatabase]NORTHWIND.SUPPLIERS.COMPANY_NAME,\n    contactName: [store::MyDatabase]NORTHWIND.SUPPLIERS.CONTACT_NAME,\n    contactTitle: [store::MyDatabase]NORTHWIND.SUPPLIERS.CONTACT_TITLE,\n    address: [store::MyDatabase]NORTHWIND.SUPPLIERS.ADDRESS,\n    city: [store::MyDatabase]NORTHWIND.SUPPLIERS.CITY,\n    region: [store::MyDatabase]NORTHWIND.SUPPLIERS.REGION,\n    postalCode: [store::MyDatabase]NORTHWIND.SUPPLIERS.POSTAL_CODE,\n    country: [store::MyDatabase]NORTHWIND.SUPPLIERS.COUNTRY,\n    phone: [store::MyDatabase]NORTHWIND.SUPPLIERS.PHONE,\n    fax: [store::MyDatabase]NORTHWIND.SUPPLIERS.FAX,\n    homepage: [store::MyDatabase]NORTHWIND.SUPPLIERS.HOMEPAGE\n  }\n  *store::NORTHWIND::Territories[store_NORTHWIND_Territories]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.TERRITORIES.TERRITORY_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.TERRITORIES\n    territoryId: [store::MyDatabase]NORTHWIND.TERRITORIES.TERRITORY_ID,\n    territoryDescription: [store::MyDatabase]NORTHWIND.TERRITORIES.TERRITORY_DESCRIPTION,\n    regionId: [store::MyDatabase]NORTHWIND.TERRITORIES.REGION_ID\n  }\n  *store::NORTHWIND::UsStates[store_NORTHWIND_UsStates]: Relational\n  {\n    ~primaryKey\n    (\n      [store::MyDatabase]NORTHWIND.US_STATES.STATE_ID\n    )\n    ~mainTable [store::MyDatabase]NORTHWIND.US_STATES\n    stateId: [store::MyDatabase]NORTHWIND.US_STATES.STATE_ID,\n    stateName: [store::MyDatabase]NORTHWIND.US_STATES.STATE_NAME,\n    stateAbbr: [store::MyDatabase]NORTHWIND.US_STATES.STATE_ABBR,\n    stateRegion: [store::MyDatabase]NORTHWIND.US_STATES.STATE_REGION\n  }\n\n  testSuites:\n  [\n    ProductSuite:\n    {\n      function: |store::NORTHWIND::Products.all()->project([x|$x.categoryId, x|$x.discontinued, x|$x.productId, x|$x.productName, x|$x.quantityPerUnit, x|$x.reorderLevel, x|$x.supplierId, x|$x.unitPrice, x|$x.unitsInStock, x|$x.unitsOnOrder], ['Category Id', 'Discontinued', 'Product Id', 'Product Name', 'Quantity Per Unit', 'Reorder Level', 'Supplier Id', 'Unit Price', 'Units In Stock', 'Units On Order']);\n      tests:\n      [\n        productTest:\n        {\n          data:\n          [\n            store::MyDatabase:\n              Relational\n              #{\n                NORTHWIND.PRODUCTS:\n                  'PRODUCT_ID,PRODUCT_NAME,SUPPLIER_ID,CATEGORY_ID,QUANTITY_PER_UNIT,UNITS_IN_STOCK,UNITS_ON_ORDER,REORDER_LEVEL,DISCONTINUED\\n'+\n                  '1,MyProduct,1,2,20,2,4,10,0\\n';\n              }#\n          ];\n          asserts:\n          [\n            expectedAssertion:\n              EqualToJson\n              #{\n                expected:\n                  ExternalFormat\n                  #{\n                    contentType: 'application/json';\n                    data: '[ {\\r\\n  \"Category Id\" : 2,\\r\\n  \"Discontinued\" : 0,\\r\\n  \"Product Id\" : 1,\\r\\n  \"Product Name\" : \"MyProduct\",\\r\\n  \"Quantity Per Unit\" : \"20\",\\r\\n  \"Reorder Level\" : 10,\\r\\n  \"Supplier Id\" : 1,\\r\\n  \"Unit Price\" : null,\\r\\n  \"Units In Stock\" : 2,\\r\\n  \"Units On Order\" : 4\\r\\n} ]';\n                  }#;\n              }#\n          ];\n        }\n      ];\n    }\n  ]\n)\n\n\n###Connection\nRelationalDatabaseConnection model::NorthWindH2Connection\n{\n  store: store::MyDatabase;\n  type: H2;\n  specification: LocalH2\n  {\n    testDataSetupSqls: [\n      '-- loads sample data for getting started. See https://github.com/pthom/northwind_psql for more info\\n call loadNorthwindData()'\n      ];\n  };\n  auth: DefaultH2;\n}\n\n\n###Runtime\nRuntime model::NorthWindRuntime\n{\n  mappings:\n  [\n    store::MyDatabaseMapping\n  ];\n  connections:\n  [\n    store::MyDatabase:\n    [\n      connection_1: model::NorthWindH2Connection\n    ]\n  ];\n}\n"},{"title":"Service Store Connection","documentation":"TODO: Some dummy description","development":true,"path":"Store/Service Store/Connection","code":""},{"title":"Service Store Mapping","documentation":"TODO: Some dummy description","development":true,"path":"Store/Service Store/Mapping","code":""},{"title":"Service Store","documentation":"TODO: Some dummy description","development":true,"path":"Store/Service Store/Store","code":""}]