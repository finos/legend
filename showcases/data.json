[{"title":"Basic model-to-model mapping","description":"A simple example to demonstrate how to use Legend with model-to-model mapping","documnetation":"TODO: Some dummy description","path":"Stores/Model Store/Mapping","code":"###Service\nService model::ModelToModelMappingService\n{\n  pattern: '/myURL';\n  documentation: '';\n  autoActivateUpdates: true;\n  execution: Single\n  {\n    query: |model::target::_Firm.all()->graphFetchChecked(#{model::target::_Firm{name,type,employees{fullName}}}#)->serialize(#{model::target::_Firm{name,type,employees{fullName}}}#);\n    mapping: model::ModelToModelMapping;\n    runtime:\n    #{\n      mappings:\n      [\n        model::ModelToModelMapping\n      ];\n      connections:\n      [\n        ModelStore:\n        [\n          connection_1:\n          #{\n            JsonModelConnection\n            {\n              class: model::Firm;\n              url: 'data:application/json,';\n            }\n          }#\n        ]\n      ];\n    }#;\n  }\n  testSuites:\n  [\n\n  ]\n  test: Single\n  {\n    data: '';\n    asserts:\n    [\n      { [], res: meta::pure::mapping::Result[1]|$res.values->toOne()->toString()->equalJsonStrings('') }\n    ];\n  }\n}\n\n\n###Pure\nEnum model::target::IncType\n{\n  LLC,\n  CORP\n}\n\nClass model::Firm\n{\n  employees: model::Person[1..*];\n  type: String[1];\n  legalName: String[1];\n}\n\nClass model::Person\n{\n  firstName: String[1];\n  lastName: String[1];\n}\n\nClass model::target::_Firm extends model::target::_LegalEntity\n{\n  employees: model::target::_Person[1..*];\n  type: model::target::IncType[1];\n}\n\nClass model::target::_Person\n{\n  fullName: String[1];\n}\n\nClass model::target::_LegalEntity\n{\n  name: String[1];\n}\n\n\n###Mapping\nMapping model::ModelToModelMapping\n(\n  *model::target::_Person: Pure\n  {\n    ~src model::Person\n    fullName: $src.firstName\n  }\n  *model::target::_Firm: Pure\n  {\n    ~src model::Firm\n    employees[model_target__Person]: $src.employees,\n    type: EnumerationMapping model_target_IncType: $src.type,\n    name: $src.legalName\n  }\n\n  model::target::IncType: EnumerationMapping\n  {\n    LLC: ['llc'],\n    CORP: ['corp']\n  }\n\n  MappingTests\n  [\n    test_1\n    (\n      query: |model::target::_Firm.all()->graphFetchChecked(#{model::target::_Firm{name,type,employees{fullName}}}#)->serialize(#{model::target::_Firm{name,type,employees{fullName}}}#);\n      data:\n      [\n        <Object, JSON, model::Firm, '{\"employees\":[{\"firstName\":\"firstName 92\",\"lastName\":\"lastName 40\"}],\"type\":\"corp\",\"legalName\":\"legalName 55\"}'>\n      ];\n      assert: '{\"defects\":[],\"source\":{\"defects\":[],\"source\":{\"number\":1,\"record\":\"{\\\"employees\\\":[{\\\"firstName\\\":\\\"firstName 92\\\",\\\"lastName\\\":\\\"lastName 40\\\"}],\\\"type\\\":\\\"corp\\\",\\\"legalName\\\":\\\"legalName 55\\\"}\"},\"value\":{\"legalName\":\"legalName 55\",\"type\":\"corp\",\"employees\":[{\"firstName\":\"firstName 92\"}]}},\"value\":{\"name\":\"legalName 55\",\"type\":\"CORP\",\"employees\":[{\"fullName\":\"firstName 92\"}]}}';\n    )\n  ]\n)\n\n\n###Runtime\nRuntime model::runtime\n{\n  mappings:\n  [\n    model::ModelToModelMapping\n  ];\n  connections:\n  [\n    ModelStore:\n    [\n      connection_1:\n      #{\n        JsonModelConnection\n        {\n          class: model::Firm;\n          url: 'data:application/json,%7B%22employees%22%3A%5B%7B%22firstName%22%3A%22firstName%2013%22%2C%22lastName%22%3A%22lastName%2035%22%7D%5D%7D';\n        }\n      }#\n    ]\n  ];\n}\n"},{"title":"Basic usage with relational database","description":"A simple example to demonstrate how to use Legend with relational database","documnetation":"TODO: Some dummy description","path":"Stores/Relational Database/Mapping","code":"###Relational\nDatabase store::CovidDataStore\n(\n  Table DEMOGRAPHICS\n  (\n    FIPS VARCHAR(200),\n    STATE VARCHAR(200)\n  )\n  Table COVID_DATA\n  (\n    ID INTEGER PRIMARY KEY,\n    FIPS VARCHAR(200),\n    DATE DATE,\n    CASE_TYPE VARCHAR(200),\n    CASES INTEGER,\n    LAST_REPORTED_FLAG BIT\n  )\n\n  Join CovidDataDemographicsJoin(DEMOGRAPHICS.FIPS = COVID_DATA.FIPS)\n)\n\n\n###Pure\nClass domain::Demographics\n{\n  fips: String[0..1];\n  state: String[0..1];\n}\n\nClass domain::COVIDData\n{\n  id: Integer[1];\n  fips: String[0..1];\n  date: StrictDate[0..1];\n  caseType: String[0..1];\n  cases: Float[0..1];\n  lastReportedFlag: Boolean[0..1];\n  demographics: domain::Demographics[0..1];\n}\n\n\n###Mapping\nMapping mapping::CovidDataMapping\n(\n  domain::Demographics: Relational\n  {\n    ~primaryKey\n    (\n      [store::CovidDataStore]DEMOGRAPHICS.FIPS\n    )\n    ~mainTable [store::CovidDataStore]DEMOGRAPHICS\n    fips: [store::CovidDataStore]DEMOGRAPHICS.FIPS,\n    state: [store::CovidDataStore]DEMOGRAPHICS.STATE\n  }\n  domain::COVIDData: Relational\n  {\n    ~primaryKey\n    (\n      [store::CovidDataStore]COVID_DATA.ID\n    )\n    ~mainTable [store::CovidDataStore]COVID_DATA\n    id: [store::CovidDataStore]COVID_DATA.ID,\n    fips: [store::CovidDataStore]COVID_DATA.FIPS,\n    date: [store::CovidDataStore]COVID_DATA.DATE,\n    caseType: [store::CovidDataStore]COVID_DATA.CASE_TYPE,\n    cases: [store::CovidDataStore]COVID_DATA.CASES,\n    lastReportedFlag: [store::CovidDataStore]COVID_DATA.LAST_REPORTED_FLAG,\n    demographics[domain_Demographics]: [store::CovidDataStore]@CovidDataDemographicsJoin\n  }\n)\n\n\n###Connection\nRelationalDatabaseConnection runtime::connection::H2Connection\n{\n  store: store::CovidDataStore;\n  type: H2;\n  specification: LocalH2\n  {\n    testDataSetupSqls: [\n      'DROP TABLE IF EXISTS COVID_DATA;\\nDROP TABLE IF EXISTS DEMOGRAPHICS;\\n\\nCREATE TABLE DEMOGRAPHICS(\\n  FIPS VARCHAR(200) PRIMARY KEY,\\n  STATE VARCHAR(200)\\n);\\n\\nCREATE TABLE COVID_DATA(\\n  ID INT PRIMARY KEY,\\n  FIPS VARCHAR(200),\\n  DATE DATE,\\n  CASE_TYPE VARCHAR(200),\\n  CASES INT,\\n  LAST_REPORTED_FLAG BIT,\\n  FOREIGN KEY (FIPS) REFERENCES DEMOGRAPHICS(FIPS)\\n);\\n\\nINSERT INTO DEMOGRAPHICS VALUES(\\'1\\', \\'NY\\');\\nINSERT INTO DEMOGRAPHICS VALUES(\\'2\\', \\'NJ\\');\\nINSERT INTO DEMOGRAPHICS VALUES(\\'3\\', \\'CA\\');\\n\\nINSERT INTO COVID_DATA VALUES(1, \\'1\\', \\'2021-04-01\\', \\'Confirmed\\', 405, 0);\\nINSERT INTO COVID_DATA VALUES(2, \\'2\\', \\'2021-04-01\\', \\'Active\\', 290, 1);\\n'\n      ];\n  };\n  auth: DefaultH2;\n}\n\n\n###Runtime\nRuntime runtime::H2Runtime\n{\n  mappings:\n  [\n    mapping::CovidDataMapping\n  ];\n  connections:\n  [\n    store::CovidDataStore:\n    [\n      connection_1: runtime::connection::H2Connection\n    ]\n  ];\n}\n"}]